/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C25_GlobalPosition/msg/C25C0_ROP.msg */
#ifndef C25_GLOBALPOSITION_MESSAGE_C25C0_ROP_H
#define C25_GLOBALPOSITION_MESSAGE_C25C0_ROP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C25_GlobalPosition/UTM.h"

namespace C25_GlobalPosition
{
template <class ContainerAllocator>
struct C25C0_ROP_ {
  typedef C25C0_ROP_<ContainerAllocator> Type;

  C25C0_ROP_()
  : min_dimensions()
  {
  }

  C25C0_ROP_(const ContainerAllocator& _alloc)
  : min_dimensions(_alloc)
  {
  }

  typedef  ::C25_GlobalPosition::UTM_<ContainerAllocator>  _min_dimensions_type;
   ::C25_GlobalPosition::UTM_<ContainerAllocator>  min_dimensions;


  typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C25C0_ROP
typedef  ::C25_GlobalPosition::C25C0_ROP_<std::allocator<void> > C25C0_ROP;

typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP> C25C0_ROPPtr;
typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP const> C25C0_ROPConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C25_GlobalPosition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "be84340d122053fde2ff77602328c75b";
  }

  static const char* value(const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbe84340d122053fdULL;
  static const uint64_t static_value2 = 0xe2ff77602328c75bULL;
};

template<class ContainerAllocator>
struct DataType< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25C0_ROP";
  }

  static const char* value(const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/UTM min_dimensions\n\
\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/UTM\n\
int32 zone\n\
int64 easting\n\
int64 northing\n\
int32 hemisphere\n\
int32 NORTHERN_HEMISPHERE=0\n\
int32 SOUTHERN_HEMISPHERE=1\n\
\n\
";
  }

  static const char* value(const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.min_dimensions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C25C0_ROP_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> & v) 
  {
    s << indent << "min_dimensions: ";
s << std::endl;
    Printer< ::C25_GlobalPosition::UTM_<ContainerAllocator> >::stream(s, indent + "  ", v.min_dimensions);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C25_GLOBALPOSITION_MESSAGE_C25C0_ROP_H

