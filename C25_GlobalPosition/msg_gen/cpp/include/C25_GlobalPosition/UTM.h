/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C25_GlobalPosition/msg/UTM.msg */
#ifndef C25_GLOBALPOSITION_MESSAGE_UTM_H
#define C25_GLOBALPOSITION_MESSAGE_UTM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C25_GlobalPosition
{
template <class ContainerAllocator>
struct UTM_ {
  typedef UTM_<ContainerAllocator> Type;

  UTM_()
  : zone(0)
  , easting(0)
  , northing(0)
  , hemisphere(0)
  {
  }

  UTM_(const ContainerAllocator& _alloc)
  : zone(0)
  , easting(0)
  , northing(0)
  , hemisphere(0)
  {
  }

  typedef int32_t _zone_type;
  int32_t zone;

  typedef int64_t _easting_type;
  int64_t easting;

  typedef int64_t _northing_type;
  int64_t northing;

  typedef int32_t _hemisphere_type;
  int32_t hemisphere;

  enum { NORTHERN_HEMISPHERE = 0 };
  enum { SOUTHERN_HEMISPHERE = 1 };

  typedef boost::shared_ptr< ::C25_GlobalPosition::UTM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C25_GlobalPosition::UTM_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct UTM
typedef  ::C25_GlobalPosition::UTM_<std::allocator<void> > UTM;

typedef boost::shared_ptr< ::C25_GlobalPosition::UTM> UTMPtr;
typedef boost::shared_ptr< ::C25_GlobalPosition::UTM const> UTMConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C25_GlobalPosition::UTM_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C25_GlobalPosition::UTM_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C25_GlobalPosition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::UTM_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::UTM_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C25_GlobalPosition::UTM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1bca048ba614aa29513b05a11622a3ac";
  }

  static const char* value(const  ::C25_GlobalPosition::UTM_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1bca048ba614aa29ULL;
  static const uint64_t static_value2 = 0x513b05a11622a3acULL;
};

template<class ContainerAllocator>
struct DataType< ::C25_GlobalPosition::UTM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/UTM";
  }

  static const char* value(const  ::C25_GlobalPosition::UTM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C25_GlobalPosition::UTM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 zone\n\
int64 easting\n\
int64 northing\n\
int32 hemisphere\n\
int32 NORTHERN_HEMISPHERE=0\n\
int32 SOUTHERN_HEMISPHERE=1\n\
\n\
";
  }

  static const char* value(const  ::C25_GlobalPosition::UTM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C25_GlobalPosition::UTM_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C25_GlobalPosition::UTM_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.zone);
    stream.next(m.easting);
    stream.next(m.northing);
    stream.next(m.hemisphere);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UTM_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C25_GlobalPosition::UTM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C25_GlobalPosition::UTM_<ContainerAllocator> & v) 
  {
    s << indent << "zone: ";
    Printer<int32_t>::stream(s, indent + "  ", v.zone);
    s << indent << "easting: ";
    Printer<int64_t>::stream(s, indent + "  ", v.easting);
    s << indent << "northing: ";
    Printer<int64_t>::stream(s, indent + "  ", v.northing);
    s << indent << "hemisphere: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hemisphere);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C25_GLOBALPOSITION_MESSAGE_UTM_H

