"""autogenerated by genpy from C25_GlobalPosition/C25C0_ROP.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C25_GlobalPosition.msg

class C25C0_ROP(genpy.Message):
  _md5sum = "be84340d122053fde2ff77602328c75b"
  _type = "C25_GlobalPosition/C25C0_ROP"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C25_GlobalPosition/UTM min_dimensions


================================================================================
MSG: C25_GlobalPosition/UTM
int32 zone
int64 easting
int64 northing
int32 hemisphere
int32 NORTHERN_HEMISPHERE=0
int32 SOUTHERN_HEMISPHERE=1

"""
  __slots__ = ['min_dimensions']
  _slot_types = ['C25_GlobalPosition/UTM']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       min_dimensions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C25C0_ROP, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.min_dimensions is None:
        self.min_dimensions = C25_GlobalPosition.msg.UTM()
    else:
      self.min_dimensions = C25_GlobalPosition.msg.UTM()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2qi.pack(_x.min_dimensions.zone, _x.min_dimensions.easting, _x.min_dimensions.northing, _x.min_dimensions.hemisphere))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.min_dimensions is None:
        self.min_dimensions = C25_GlobalPosition.msg.UTM()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.min_dimensions.zone, _x.min_dimensions.easting, _x.min_dimensions.northing, _x.min_dimensions.hemisphere,) = _struct_i2qi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2qi.pack(_x.min_dimensions.zone, _x.min_dimensions.easting, _x.min_dimensions.northing, _x.min_dimensions.hemisphere))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.min_dimensions is None:
        self.min_dimensions = C25_GlobalPosition.msg.UTM()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.min_dimensions.zone, _x.min_dimensions.easting, _x.min_dimensions.northing, _x.min_dimensions.hemisphere,) = _struct_i2qi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2qi = struct.Struct("<i2qi")
