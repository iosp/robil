"""autogenerated by genpy from C25_GlobalPosition/C25Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C25_GlobalPosition.msg

class C25Request(genpy.Message):
  _md5sum = "eb67ba7f1b59ebf2ae5f1ea7ca5cac8d"
  _type = "C25_GlobalPosition/C25Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C25_GlobalPosition/C0C25_AZI azimuth
C25_GlobalPosition/C0C25_CAM camera_sample_rate
C25_GlobalPosition/C0C25_LAZ laser_sample_rate

================================================================================
MSG: C25_GlobalPosition/C0C25_AZI
float32 azimuth

================================================================================
MSG: C25_GlobalPosition/C0C25_CAM
int32 frameRatePerSec

================================================================================
MSG: C25_GlobalPosition/C0C25_LAZ
int32 sampleRatePerSec

"""
  __slots__ = ['azimuth','camera_sample_rate','laser_sample_rate']
  _slot_types = ['C25_GlobalPosition/C0C25_AZI','C25_GlobalPosition/C0C25_CAM','C25_GlobalPosition/C0C25_LAZ']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       azimuth,camera_sample_rate,laser_sample_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C25Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.azimuth is None:
        self.azimuth = C25_GlobalPosition.msg.C0C25_AZI()
      if self.camera_sample_rate is None:
        self.camera_sample_rate = C25_GlobalPosition.msg.C0C25_CAM()
      if self.laser_sample_rate is None:
        self.laser_sample_rate = C25_GlobalPosition.msg.C0C25_LAZ()
    else:
      self.azimuth = C25_GlobalPosition.msg.C0C25_AZI()
      self.camera_sample_rate = C25_GlobalPosition.msg.C0C25_CAM()
      self.laser_sample_rate = C25_GlobalPosition.msg.C0C25_LAZ()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f2i.pack(_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.azimuth is None:
        self.azimuth = C25_GlobalPosition.msg.C0C25_AZI()
      if self.camera_sample_rate is None:
        self.camera_sample_rate = C25_GlobalPosition.msg.C0C25_CAM()
      if self.laser_sample_rate is None:
        self.laser_sample_rate = C25_GlobalPosition.msg.C0C25_LAZ()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec,) = _struct_f2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f2i.pack(_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.azimuth is None:
        self.azimuth = C25_GlobalPosition.msg.C0C25_AZI()
      if self.camera_sample_rate is None:
        self.camera_sample_rate = C25_GlobalPosition.msg.C0C25_CAM()
      if self.laser_sample_rate is None:
        self.laser_sample_rate = C25_GlobalPosition.msg.C0C25_LAZ()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec,) = _struct_f2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f2i = struct.Struct("<f2i")
"""autogenerated by genpy from C25_GlobalPosition/C25Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C25_GlobalPosition.msg

class C25Response(genpy.Message):
  _md5sum = "06b495b0c58b5c3fa93c202c0d5548ab"
  _type = "C25_GlobalPosition/C25Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C25_GlobalPosition/C25C0_ROP robotPosition
C25_GlobalPosition/C25C0_OPO qualityOfError


================================================================================
MSG: C25_GlobalPosition/C25C0_ROP
C25_GlobalPosition/UTM min_dimensions


================================================================================
MSG: C25_GlobalPosition/UTM
int32 zone
int64 easting
int64 northing
int32 hemisphere
int32 NORTHERN_HEMISPHERE=0
int32 SOUTHERN_HEMISPHERE=1

================================================================================
MSG: C25_GlobalPosition/C25C0_OPO
float32 qualityOfPosition

"""
  __slots__ = ['robotPosition','qualityOfError']
  _slot_types = ['C25_GlobalPosition/C25C0_ROP','C25_GlobalPosition/C25C0_OPO']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robotPosition,qualityOfError

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C25Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robotPosition is None:
        self.robotPosition = C25_GlobalPosition.msg.C25C0_ROP()
      if self.qualityOfError is None:
        self.qualityOfError = C25_GlobalPosition.msg.C25C0_OPO()
    else:
      self.robotPosition = C25_GlobalPosition.msg.C25C0_ROP()
      self.qualityOfError = C25_GlobalPosition.msg.C25C0_OPO()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2qif.pack(_x.robotPosition.min_dimensions.zone, _x.robotPosition.min_dimensions.easting, _x.robotPosition.min_dimensions.northing, _x.robotPosition.min_dimensions.hemisphere, _x.qualityOfError.qualityOfPosition))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robotPosition is None:
        self.robotPosition = C25_GlobalPosition.msg.C25C0_ROP()
      if self.qualityOfError is None:
        self.qualityOfError = C25_GlobalPosition.msg.C25C0_OPO()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.robotPosition.min_dimensions.zone, _x.robotPosition.min_dimensions.easting, _x.robotPosition.min_dimensions.northing, _x.robotPosition.min_dimensions.hemisphere, _x.qualityOfError.qualityOfPosition,) = _struct_i2qif.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2qif.pack(_x.robotPosition.min_dimensions.zone, _x.robotPosition.min_dimensions.easting, _x.robotPosition.min_dimensions.northing, _x.robotPosition.min_dimensions.hemisphere, _x.qualityOfError.qualityOfPosition))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robotPosition is None:
        self.robotPosition = C25_GlobalPosition.msg.C25C0_ROP()
      if self.qualityOfError is None:
        self.qualityOfError = C25_GlobalPosition.msg.C25C0_OPO()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.robotPosition.min_dimensions.zone, _x.robotPosition.min_dimensions.easting, _x.robotPosition.min_dimensions.northing, _x.robotPosition.min_dimensions.hemisphere, _x.qualityOfError.qualityOfPosition,) = _struct_i2qif.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2qif = struct.Struct("<i2qif")
class C25(object):
  _type          = 'C25_GlobalPosition/C25'
  _md5sum = 'f2e36a28014593f1ba0d9b48126bdf08'
  _request_class  = C25Request
  _response_class = C25Response
