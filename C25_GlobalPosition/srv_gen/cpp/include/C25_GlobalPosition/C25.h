/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C25_GlobalPosition/srv/C25.srv */
#ifndef C25_GLOBALPOSITION_SERVICE_C25_H
#define C25_GLOBALPOSITION_SERVICE_C25_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C25_GlobalPosition/C0C25_AZI.h"
#include "C25_GlobalPosition/C0C25_CAM.h"
#include "C25_GlobalPosition/C0C25_LAZ.h"


#include "C25_GlobalPosition/C25C0_ROP.h"
#include "C25_GlobalPosition/C25C0_OPO.h"

namespace C25_GlobalPosition
{
template <class ContainerAllocator>
struct C25Request_ {
  typedef C25Request_<ContainerAllocator> Type;

  C25Request_()
  : azimuth()
  , camera_sample_rate()
  , laser_sample_rate()
  {
  }

  C25Request_(const ContainerAllocator& _alloc)
  : azimuth(_alloc)
  , camera_sample_rate(_alloc)
  , laser_sample_rate(_alloc)
  {
  }

  typedef  ::C25_GlobalPosition::C0C25_AZI_<ContainerAllocator>  _azimuth_type;
   ::C25_GlobalPosition::C0C25_AZI_<ContainerAllocator>  azimuth;

  typedef  ::C25_GlobalPosition::C0C25_CAM_<ContainerAllocator>  _camera_sample_rate_type;
   ::C25_GlobalPosition::C0C25_CAM_<ContainerAllocator>  camera_sample_rate;

  typedef  ::C25_GlobalPosition::C0C25_LAZ_<ContainerAllocator>  _laser_sample_rate_type;
   ::C25_GlobalPosition::C0C25_LAZ_<ContainerAllocator>  laser_sample_rate;


  typedef boost::shared_ptr< ::C25_GlobalPosition::C25Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C25_GlobalPosition::C25Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C25Request
typedef  ::C25_GlobalPosition::C25Request_<std::allocator<void> > C25Request;

typedef boost::shared_ptr< ::C25_GlobalPosition::C25Request> C25RequestPtr;
typedef boost::shared_ptr< ::C25_GlobalPosition::C25Request const> C25RequestConstPtr;


template <class ContainerAllocator>
struct C25Response_ {
  typedef C25Response_<ContainerAllocator> Type;

  C25Response_()
  : robotPosition()
  , qualityOfError()
  {
  }

  C25Response_(const ContainerAllocator& _alloc)
  : robotPosition(_alloc)
  , qualityOfError(_alloc)
  {
  }

  typedef  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator>  _robotPosition_type;
   ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator>  robotPosition;

  typedef  ::C25_GlobalPosition::C25C0_OPO_<ContainerAllocator>  _qualityOfError_type;
   ::C25_GlobalPosition::C25C0_OPO_<ContainerAllocator>  qualityOfError;


  typedef boost::shared_ptr< ::C25_GlobalPosition::C25Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C25_GlobalPosition::C25Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C25Response
typedef  ::C25_GlobalPosition::C25Response_<std::allocator<void> > C25Response;

typedef boost::shared_ptr< ::C25_GlobalPosition::C25Response> C25ResponsePtr;
typedef boost::shared_ptr< ::C25_GlobalPosition::C25Response const> C25ResponseConstPtr;

struct C25
{

typedef C25Request Request;
typedef C25Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C25
} // namespace C25_GlobalPosition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C25_GlobalPosition::C25Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb67ba7f1b59ebf2ae5f1ea7ca5cac8d";
  }

  static const char* value(const  ::C25_GlobalPosition::C25Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb67ba7f1b59ebf2ULL;
  static const uint64_t static_value2 = 0xae5f1ea7ca5cac8dULL;
};

template<class ContainerAllocator>
struct DataType< ::C25_GlobalPosition::C25Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25Request";
  }

  static const char* value(const  ::C25_GlobalPosition::C25Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C25_GlobalPosition::C25Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C0C25_AZI azimuth\n\
C25_GlobalPosition/C0C25_CAM camera_sample_rate\n\
C25_GlobalPosition/C0C25_LAZ laser_sample_rate\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/C0C25_AZI\n\
float32 azimuth\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/C0C25_CAM\n\
int32 frameRatePerSec\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/C0C25_LAZ\n\
int32 sampleRatePerSec\n\
\n\
";
  }

  static const char* value(const  ::C25_GlobalPosition::C25Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C25_GlobalPosition::C25Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C25_GlobalPosition::C25Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "06b495b0c58b5c3fa93c202c0d5548ab";
  }

  static const char* value(const  ::C25_GlobalPosition::C25Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x06b495b0c58b5c3fULL;
  static const uint64_t static_value2 = 0xa93c202c0d5548abULL;
};

template<class ContainerAllocator>
struct DataType< ::C25_GlobalPosition::C25Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25Response";
  }

  static const char* value(const  ::C25_GlobalPosition::C25Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C25_GlobalPosition::C25Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25C0_ROP robotPosition\n\
C25_GlobalPosition/C25C0_OPO qualityOfError\n\
\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/C25C0_ROP\n\
C25_GlobalPosition/UTM min_dimensions\n\
\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/UTM\n\
int32 zone\n\
int64 easting\n\
int64 northing\n\
int32 hemisphere\n\
int32 NORTHERN_HEMISPHERE=0\n\
int32 SOUTHERN_HEMISPHERE=1\n\
\n\
================================================================================\n\
MSG: C25_GlobalPosition/C25C0_OPO\n\
float32 qualityOfPosition\n\
\n\
";
  }

  static const char* value(const  ::C25_GlobalPosition::C25Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C25_GlobalPosition::C25Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C25_GlobalPosition::C25Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.azimuth);
    stream.next(m.camera_sample_rate);
    stream.next(m.laser_sample_rate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C25Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C25_GlobalPosition::C25Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robotPosition);
    stream.next(m.qualityOfError);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C25Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C25_GlobalPosition::C25> {
  static const char* value() 
  {
    return "f2e36a28014593f1ba0d9b48126bdf08";
  }

  static const char* value(const C25_GlobalPosition::C25&) { return value(); } 
};

template<>
struct DataType<C25_GlobalPosition::C25> {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25";
  }

  static const char* value(const C25_GlobalPosition::C25&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C25_GlobalPosition::C25Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f2e36a28014593f1ba0d9b48126bdf08";
  }

  static const char* value(const C25_GlobalPosition::C25Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C25_GlobalPosition::C25Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25";
  }

  static const char* value(const C25_GlobalPosition::C25Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C25_GlobalPosition::C25Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f2e36a28014593f1ba0d9b48126bdf08";
  }

  static const char* value(const C25_GlobalPosition::C25Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C25_GlobalPosition::C25Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25";
  }

  static const char* value(const C25_GlobalPosition::C25Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C25_GLOBALPOSITION_SERVICE_C25_H

