/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C21_VisionAndLidar/srv/C21.srv */
#ifndef C21_VISIONANDLIDAR_SERVICE_C21_H
#define C21_VISIONANDLIDAR_SERVICE_C21_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C21_VisionAndLidar/C0C21_AZI.h"
#include "C21_VisionAndLidar/C0C21_CAM.h"
#include "C21_VisionAndLidar/C0C21_LAZ.h"
#include "C21_VisionAndLidar/C0C21_SIZ.h"
#include "C21_VisionAndLidar/C0C21_RES.h"


#include "C21_VisionAndLidar/C21C0_3DF.h"
#include "C21_VisionAndLidar/C21C0_3DR.h"

namespace C21_VisionAndLidar
{
template <class ContainerAllocator>
struct C21Request_ {
  typedef C21Request_<ContainerAllocator> Type;

  C21Request_()
  : azimuth_msg()
  , camera_sample_rate_msg()
  , laser_sample_rate_msg()
  , output_image_size_msg()
  , required_resolution_msg()
  {
  }

  C21Request_(const ContainerAllocator& _alloc)
  : azimuth_msg(_alloc)
  , camera_sample_rate_msg(_alloc)
  , laser_sample_rate_msg(_alloc)
  , output_image_size_msg(_alloc)
  , required_resolution_msg(_alloc)
  {
  }

  typedef  ::C21_VisionAndLidar::C0C21_AZI_<ContainerAllocator>  _azimuth_msg_type;
   ::C21_VisionAndLidar::C0C21_AZI_<ContainerAllocator>  azimuth_msg;

  typedef  ::C21_VisionAndLidar::C0C21_CAM_<ContainerAllocator>  _camera_sample_rate_msg_type;
   ::C21_VisionAndLidar::C0C21_CAM_<ContainerAllocator>  camera_sample_rate_msg;

  typedef  ::C21_VisionAndLidar::C0C21_LAZ_<ContainerAllocator>  _laser_sample_rate_msg_type;
   ::C21_VisionAndLidar::C0C21_LAZ_<ContainerAllocator>  laser_sample_rate_msg;

  typedef  ::C21_VisionAndLidar::C0C21_SIZ_<ContainerAllocator>  _output_image_size_msg_type;
   ::C21_VisionAndLidar::C0C21_SIZ_<ContainerAllocator>  output_image_size_msg;

  typedef  ::C21_VisionAndLidar::C0C21_RES_<ContainerAllocator>  _required_resolution_msg_type;
   ::C21_VisionAndLidar::C0C21_RES_<ContainerAllocator>  required_resolution_msg;


  typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C21Request
typedef  ::C21_VisionAndLidar::C21Request_<std::allocator<void> > C21Request;

typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Request> C21RequestPtr;
typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Request const> C21RequestConstPtr;


template <class ContainerAllocator>
struct C21Response_ {
  typedef C21Response_<ContainerAllocator> Type;

  C21Response_()
  : scene_full_resolution_msg()
  , scene_reduced_resolution_msg()
  {
  }

  C21Response_(const ContainerAllocator& _alloc)
  : scene_full_resolution_msg(_alloc)
  , scene_reduced_resolution_msg(_alloc)
  {
  }

  typedef  ::C21_VisionAndLidar::C21C0_3DF_<ContainerAllocator>  _scene_full_resolution_msg_type;
   ::C21_VisionAndLidar::C21C0_3DF_<ContainerAllocator>  scene_full_resolution_msg;

  typedef  ::C21_VisionAndLidar::C21C0_3DR_<ContainerAllocator>  _scene_reduced_resolution_msg_type;
   ::C21_VisionAndLidar::C21C0_3DR_<ContainerAllocator>  scene_reduced_resolution_msg;


  typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C21Response
typedef  ::C21_VisionAndLidar::C21Response_<std::allocator<void> > C21Response;

typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Response> C21ResponsePtr;
typedef boost::shared_ptr< ::C21_VisionAndLidar::C21Response const> C21ResponseConstPtr;

struct C21
{

typedef C21Request Request;
typedef C21Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C21
} // namespace C21_VisionAndLidar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C21_VisionAndLidar::C21Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ed6b9f19289099a428ab939719da641";
  }

  static const char* value(const  ::C21_VisionAndLidar::C21Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3ed6b9f19289099aULL;
  static const uint64_t static_value2 = 0x428ab939719da641ULL;
};

template<class ContainerAllocator>
struct DataType< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C21Request";
  }

  static const char* value(const  ::C21_VisionAndLidar::C21Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C0C21_AZI azimuth_msg\n\
C21_VisionAndLidar/C0C21_CAM camera_sample_rate_msg\n\
C21_VisionAndLidar/C0C21_LAZ laser_sample_rate_msg\n\
C21_VisionAndLidar/C0C21_SIZ output_image_size_msg\n\
C21_VisionAndLidar/C0C21_RES required_resolution_msg\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C0C21_AZI\n\
float32 azimuth\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C0C21_CAM\n\
int32 frameRatePerSec\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C0C21_LAZ\n\
int32 sampleRatePerSec\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C0C21_SIZ\n\
int32 image_width\n\
int32 image_height\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C0C21_RES\n\
int32 resulution_width\n\
int32 resulution_height\n\
\n\
";
  }

  static const char* value(const  ::C21_VisionAndLidar::C21Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C21_VisionAndLidar::C21Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C21_VisionAndLidar::C21Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C21_VisionAndLidar::C21Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "374da03ae3537511d89c715035445582";
  }

  static const char* value(const  ::C21_VisionAndLidar::C21Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x374da03ae3537511ULL;
  static const uint64_t static_value2 = 0xd89c715035445582ULL;
};

template<class ContainerAllocator>
struct DataType< ::C21_VisionAndLidar::C21Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C21Response";
  }

  static const char* value(const  ::C21_VisionAndLidar::C21Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C21_VisionAndLidar::C21Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C21C0_3DF scene_full_resolution_msg\n\
C21_VisionAndLidar/C21C0_3DR scene_reduced_resolution_msg\n\
\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C21C0_3DF\n\
sensor_msgs/PointCloud2 cloud\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: C21_VisionAndLidar/C21C0_3DR\n\
sensor_msgs/PointCloud2 cloud\n\
\n\
";
  }

  static const char* value(const  ::C21_VisionAndLidar::C21Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C21_VisionAndLidar::C21Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.azimuth_msg);
    stream.next(m.camera_sample_rate_msg);
    stream.next(m.laser_sample_rate_msg);
    stream.next(m.output_image_size_msg);
    stream.next(m.required_resolution_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C21Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C21_VisionAndLidar::C21Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.scene_full_resolution_msg);
    stream.next(m.scene_reduced_resolution_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C21Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C21_VisionAndLidar::C21> {
  static const char* value() 
  {
    return "4e473a5daadf18cff103ca3edae75827";
  }

  static const char* value(const C21_VisionAndLidar::C21&) { return value(); } 
};

template<>
struct DataType<C21_VisionAndLidar::C21> {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C21";
  }

  static const char* value(const C21_VisionAndLidar::C21&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C21_VisionAndLidar::C21Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4e473a5daadf18cff103ca3edae75827";
  }

  static const char* value(const C21_VisionAndLidar::C21Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C21_VisionAndLidar::C21Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C21";
  }

  static const char* value(const C21_VisionAndLidar::C21Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C21_VisionAndLidar::C21Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4e473a5daadf18cff103ca3edae75827";
  }

  static const char* value(const C21_VisionAndLidar::C21Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C21_VisionAndLidar::C21Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C21_VisionAndLidar/C21";
  }

  static const char* value(const C21_VisionAndLidar::C21Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C21_VISIONANDLIDAR_SERVICE_C21_H

