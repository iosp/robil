/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C23_ObjectRecognition/msg/C0C23_SAR.msg */
#ifndef C23_OBJECTRECOGNITION_MESSAGE_C0C23_SAR_H
#define C23_OBJECTRECOGNITION_MESSAGE_C0C23_SAR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C23_ObjectRecognition
{
template <class ContainerAllocator>
struct C0C23_SAR_ {
  typedef C0C23_SAR_<ContainerAllocator> Type;

  C0C23_SAR_()
  : SARV_L(0.0)
  , SARV_U(0.0)
  , SARH_L(0.0)
  , SARH_R(0.0)
  {
  }

  C0C23_SAR_(const ContainerAllocator& _alloc)
  : SARV_L(0.0)
  , SARV_U(0.0)
  , SARH_L(0.0)
  , SARH_R(0.0)
  {
  }

  typedef float _SARV_L_type;
  float SARV_L;

  typedef float _SARV_U_type;
  float SARV_U;

  typedef float _SARH_L_type;
  float SARH_L;

  typedef float _SARH_R_type;
  float SARH_R;


  typedef boost::shared_ptr< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C23_SAR
typedef  ::C23_ObjectRecognition::C0C23_SAR_<std::allocator<void> > C0C23_SAR;

typedef boost::shared_ptr< ::C23_ObjectRecognition::C0C23_SAR> C0C23_SARPtr;
typedef boost::shared_ptr< ::C23_ObjectRecognition::C0C23_SAR const> C0C23_SARConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C23_ObjectRecognition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "19b998d5d73668f9b2501d3193d623d5";
  }

  static const char* value(const  ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x19b998d5d73668f9ULL;
  static const uint64_t static_value2 = 0xb2501d3193d623d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C0C23_SAR";
  }

  static const char* value(const  ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 SARV_L\n\
float32 SARV_U\n\
float32 SARH_L\n\
float32 SARH_R\n\
\n\
";
  }

  static const char* value(const  ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.SARV_L);
    stream.next(m.SARV_U);
    stream.next(m.SARH_L);
    stream.next(m.SARH_R);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C23_SAR_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator> & v) 
  {
    s << indent << "SARV_L: ";
    Printer<float>::stream(s, indent + "  ", v.SARV_L);
    s << indent << "SARV_U: ";
    Printer<float>::stream(s, indent + "  ", v.SARV_U);
    s << indent << "SARH_L: ";
    Printer<float>::stream(s, indent + "  ", v.SARH_L);
    s << indent << "SARH_R: ";
    Printer<float>::stream(s, indent + "  ", v.SARH_R);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C23_OBJECTRECOGNITION_MESSAGE_C0C23_SAR_H

