/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C23_ObjectRecognition/srv/C23.srv */
#ifndef C23_OBJECTRECOGNITION_SERVICE_C23_H
#define C23_OBJECTRECOGNITION_SERVICE_C23_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C23_ObjectRecognition/C0C23_SEC.h"
#include "C23_ObjectRecognition/C0C23_SAR.h"
#include "C23_ObjectRecognition/C0C23_SEOB.h"


#include "C23_ObjectRecognition/C23C0_OD.h"
#include "C23_ObjectRecognition/C23C0_OPO.h"
#include "C23_ObjectRecognition/C23C0_ODIM.h"

namespace C23_ObjectRecognition
{
template <class ContainerAllocator>
struct C23Request_ {
  typedef C23Request_<ContainerAllocator> Type;

  C23Request_()
  : search_mode()
  , search_area()
  , search_object()
  {
  }

  C23Request_(const ContainerAllocator& _alloc)
  : search_mode(_alloc)
  , search_area(_alloc)
  , search_object(_alloc)
  {
  }

  typedef  ::C23_ObjectRecognition::C0C23_SEC_<ContainerAllocator>  _search_mode_type;
   ::C23_ObjectRecognition::C0C23_SEC_<ContainerAllocator>  search_mode;

  typedef  ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator>  _search_area_type;
   ::C23_ObjectRecognition::C0C23_SAR_<ContainerAllocator>  search_area;

  typedef  ::C23_ObjectRecognition::C0C23_SEOB_<ContainerAllocator>  _search_object_type;
   ::C23_ObjectRecognition::C0C23_SEOB_<ContainerAllocator>  search_object;


  typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C23Request
typedef  ::C23_ObjectRecognition::C23Request_<std::allocator<void> > C23Request;

typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Request> C23RequestPtr;
typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Request const> C23RequestConstPtr;


template <class ContainerAllocator>
struct C23Response_ {
  typedef C23Response_<ContainerAllocator> Type;

  C23Response_()
  : objectDetected()
  , objectPossition()
  , objectDimensions()
  {
  }

  C23Response_(const ContainerAllocator& _alloc)
  : objectDetected(_alloc)
  , objectPossition(_alloc)
  , objectDimensions(_alloc)
  {
  }

  typedef  ::C23_ObjectRecognition::C23C0_OD_<ContainerAllocator>  _objectDetected_type;
   ::C23_ObjectRecognition::C23C0_OD_<ContainerAllocator>  objectDetected;

  typedef  ::C23_ObjectRecognition::C23C0_OPO_<ContainerAllocator>  _objectPossition_type;
   ::C23_ObjectRecognition::C23C0_OPO_<ContainerAllocator>  objectPossition;

  typedef  ::C23_ObjectRecognition::C23C0_ODIM_<ContainerAllocator>  _objectDimensions_type;
   ::C23_ObjectRecognition::C23C0_ODIM_<ContainerAllocator>  objectDimensions;


  typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C23Response
typedef  ::C23_ObjectRecognition::C23Response_<std::allocator<void> > C23Response;

typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Response> C23ResponsePtr;
typedef boost::shared_ptr< ::C23_ObjectRecognition::C23Response const> C23ResponseConstPtr;

struct C23
{

typedef C23Request Request;
typedef C23Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C23
} // namespace C23_ObjectRecognition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C23_ObjectRecognition::C23Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9a77e7328462feacd28631ef4771e275";
  }

  static const char* value(const  ::C23_ObjectRecognition::C23Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9a77e7328462feacULL;
  static const uint64_t static_value2 = 0xd28631ef4771e275ULL;
};

template<class ContainerAllocator>
struct DataType< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C23Request";
  }

  static const char* value(const  ::C23_ObjectRecognition::C23Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C0C23_SEC search_mode\n\
C23_ObjectRecognition/C0C23_SAR search_area\n\
C23_ObjectRecognition/C0C23_SEOB search_object\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/C0C23_SEC\n\
int32 searchMode\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/C0C23_SAR\n\
float32 SARV_L\n\
float32 SARV_U\n\
float32 SARH_L\n\
float32 SARH_R\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/C0C23_SEOB\n\
int32 search_object\n\
int32 WHEEL=0\n\
int32 DOOR=1\n\
int32 BREAK_PEDAL=2\n\
int32 STAIR=3\n\
int32 LADDER=4\n\
int32 VALVE=5\n\
int32 TOOL=6\n\
\n\
";
  }

  static const char* value(const  ::C23_ObjectRecognition::C23Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C23_ObjectRecognition::C23Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8f78f0844a60590a414836e89ccbd4d0";
  }

  static const char* value(const  ::C23_ObjectRecognition::C23Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8f78f0844a60590aULL;
  static const uint64_t static_value2 = 0x414836e89ccbd4d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C23Response";
  }

  static const char* value(const  ::C23_ObjectRecognition::C23Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C23C0_OD objectDetected\n\
C23_ObjectRecognition/C23C0_OPO objectPossition\n\
C23_ObjectRecognition/C23C0_ODIM objectDimensions\n\
\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/C23C0_OD\n\
int32 ObjectDetected\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/C23C0_OPO\n\
C23_ObjectRecognition/TBD position\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/TBD\n\
int32 x\n\
int32 y\n\
int32 z\n\
\n\
================================================================================\n\
MSG: C23_ObjectRecognition/C23C0_ODIM\n\
C23_ObjectRecognition/TBD min_dimensions\n\
C23_ObjectRecognition/TBD max_dimensions\n\
\n\
";
  }

  static const char* value(const  ::C23_ObjectRecognition::C23Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C23_ObjectRecognition::C23Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.search_mode);
    stream.next(m.search_area);
    stream.next(m.search_object);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C23Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C23_ObjectRecognition::C23Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objectDetected);
    stream.next(m.objectPossition);
    stream.next(m.objectDimensions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C23Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C23_ObjectRecognition::C23> {
  static const char* value() 
  {
    return "63a35c438ba90815eb22ce44ef5380f8";
  }

  static const char* value(const C23_ObjectRecognition::C23&) { return value(); } 
};

template<>
struct DataType<C23_ObjectRecognition::C23> {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C23";
  }

  static const char* value(const C23_ObjectRecognition::C23&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C23_ObjectRecognition::C23Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "63a35c438ba90815eb22ce44ef5380f8";
  }

  static const char* value(const C23_ObjectRecognition::C23Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C23_ObjectRecognition::C23Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C23";
  }

  static const char* value(const C23_ObjectRecognition::C23Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C23_ObjectRecognition::C23Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "63a35c438ba90815eb22ce44ef5380f8";
  }

  static const char* value(const C23_ObjectRecognition::C23Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C23_ObjectRecognition::C23Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C23_ObjectRecognition/C23";
  }

  static const char* value(const C23_ObjectRecognition::C23Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C23_OBJECTRECOGNITION_SERVICE_C23_H

