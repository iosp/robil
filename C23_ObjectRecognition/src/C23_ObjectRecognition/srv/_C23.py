"""autogenerated by genpy from C23_ObjectRecognition/C23Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C23_ObjectRecognition.msg

class C23Request(genpy.Message):
  _md5sum = "9a77e7328462feacd28631ef4771e275"
  _type = "C23_ObjectRecognition/C23Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C23_ObjectRecognition/C0C23_SEC search_mode
C23_ObjectRecognition/C0C23_SAR search_area
C23_ObjectRecognition/C0C23_SEOB search_object

================================================================================
MSG: C23_ObjectRecognition/C0C23_SEC
int32 searchMode

================================================================================
MSG: C23_ObjectRecognition/C0C23_SAR
float32 SARV_L
float32 SARV_U
float32 SARH_L
float32 SARH_R

================================================================================
MSG: C23_ObjectRecognition/C0C23_SEOB
int32 search_object
int32 WHEEL=0
int32 DOOR=1
int32 BREAK_PEDAL=2
int32 STAIR=3
int32 LADDER=4
int32 VALVE=5
int32 TOOL=6

"""
  __slots__ = ['search_mode','search_area','search_object']
  _slot_types = ['C23_ObjectRecognition/C0C23_SEC','C23_ObjectRecognition/C0C23_SAR','C23_ObjectRecognition/C0C23_SEOB']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       search_mode,search_area,search_object

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C23Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.search_mode is None:
        self.search_mode = C23_ObjectRecognition.msg.C0C23_SEC()
      if self.search_area is None:
        self.search_area = C23_ObjectRecognition.msg.C0C23_SAR()
      if self.search_object is None:
        self.search_object = C23_ObjectRecognition.msg.C0C23_SEOB()
    else:
      self.search_mode = C23_ObjectRecognition.msg.C0C23_SEC()
      self.search_area = C23_ObjectRecognition.msg.C0C23_SAR()
      self.search_object = C23_ObjectRecognition.msg.C0C23_SEOB()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i4fi.pack(_x.search_mode.searchMode, _x.search_area.SARV_L, _x.search_area.SARV_U, _x.search_area.SARH_L, _x.search_area.SARH_R, _x.search_object.search_object))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.search_mode is None:
        self.search_mode = C23_ObjectRecognition.msg.C0C23_SEC()
      if self.search_area is None:
        self.search_area = C23_ObjectRecognition.msg.C0C23_SAR()
      if self.search_object is None:
        self.search_object = C23_ObjectRecognition.msg.C0C23_SEOB()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.search_mode.searchMode, _x.search_area.SARV_L, _x.search_area.SARV_U, _x.search_area.SARH_L, _x.search_area.SARH_R, _x.search_object.search_object,) = _struct_i4fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i4fi.pack(_x.search_mode.searchMode, _x.search_area.SARV_L, _x.search_area.SARV_U, _x.search_area.SARH_L, _x.search_area.SARH_R, _x.search_object.search_object))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.search_mode is None:
        self.search_mode = C23_ObjectRecognition.msg.C0C23_SEC()
      if self.search_area is None:
        self.search_area = C23_ObjectRecognition.msg.C0C23_SAR()
      if self.search_object is None:
        self.search_object = C23_ObjectRecognition.msg.C0C23_SEOB()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.search_mode.searchMode, _x.search_area.SARV_L, _x.search_area.SARV_U, _x.search_area.SARH_L, _x.search_area.SARH_R, _x.search_object.search_object,) = _struct_i4fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i4fi = struct.Struct("<i4fi")
"""autogenerated by genpy from C23_ObjectRecognition/C23Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C23_ObjectRecognition.msg

class C23Response(genpy.Message):
  _md5sum = "8f78f0844a60590a414836e89ccbd4d0"
  _type = "C23_ObjectRecognition/C23Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C23_ObjectRecognition/C23C0_OD objectDetected
C23_ObjectRecognition/C23C0_OPO objectPossition
C23_ObjectRecognition/C23C0_ODIM objectDimensions


================================================================================
MSG: C23_ObjectRecognition/C23C0_OD
int32 ObjectDetected

================================================================================
MSG: C23_ObjectRecognition/C23C0_OPO
C23_ObjectRecognition/TBD position

================================================================================
MSG: C23_ObjectRecognition/TBD
int32 x
int32 y
int32 z

================================================================================
MSG: C23_ObjectRecognition/C23C0_ODIM
C23_ObjectRecognition/TBD min_dimensions
C23_ObjectRecognition/TBD max_dimensions

"""
  __slots__ = ['objectDetected','objectPossition','objectDimensions']
  _slot_types = ['C23_ObjectRecognition/C23C0_OD','C23_ObjectRecognition/C23C0_OPO','C23_ObjectRecognition/C23C0_ODIM']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objectDetected,objectPossition,objectDimensions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C23Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objectDetected is None:
        self.objectDetected = C23_ObjectRecognition.msg.C23C0_OD()
      if self.objectPossition is None:
        self.objectPossition = C23_ObjectRecognition.msg.C23C0_OPO()
      if self.objectDimensions is None:
        self.objectDimensions = C23_ObjectRecognition.msg.C23C0_ODIM()
    else:
      self.objectDetected = C23_ObjectRecognition.msg.C23C0_OD()
      self.objectPossition = C23_ObjectRecognition.msg.C23C0_OPO()
      self.objectDimensions = C23_ObjectRecognition.msg.C23C0_ODIM()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10i.pack(_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objectDetected is None:
        self.objectDetected = C23_ObjectRecognition.msg.C23C0_OD()
      if self.objectPossition is None:
        self.objectPossition = C23_ObjectRecognition.msg.C23C0_OPO()
      if self.objectDimensions is None:
        self.objectDimensions = C23_ObjectRecognition.msg.C23C0_ODIM()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z,) = _struct_10i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10i.pack(_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objectDetected is None:
        self.objectDetected = C23_ObjectRecognition.msg.C23C0_OD()
      if self.objectPossition is None:
        self.objectPossition = C23_ObjectRecognition.msg.C23C0_OPO()
      if self.objectDimensions is None:
        self.objectDimensions = C23_ObjectRecognition.msg.C23C0_ODIM()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z,) = _struct_10i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10i = struct.Struct("<10i")
class C23(object):
  _type          = 'C23_ObjectRecognition/C23'
  _md5sum = '63a35c438ba90815eb22ce44ef5380f8'
  _request_class  = C23Request
  _response_class = C23Response
