"""autogenerated by genpy from C43_LocalBodyPVA/C43Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C43_LocalBodyPVA.msg

class C43Request(genpy.Message):
  _md5sum = "b39c0ca6a41fec46e6d9000493187b69"
  _type = "C43_LocalBodyPVA/C43Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C43_LocalBodyPVA/C0C43_SJ Selected_joint_msg
C43_LocalBodyPVA/C0C43_SL Selected_link_msg
C43_LocalBodyPVA/C0C43_SI Selected_information_msg
C43_LocalBodyPVA/C0C43_SLI Selected_link_information_msg

================================================================================
MSG: C43_LocalBodyPVA/C0C43_SJ
int32[] Selected_Joint

================================================================================
MSG: C43_LocalBodyPVA/C0C43_SL
int32[] Selected_Link

================================================================================
MSG: C43_LocalBodyPVA/C0C43_SI
bool[] Selected_Position
bool[] Selected_Velocity
bool[] Selected_Acceleration


================================================================================
MSG: C43_LocalBodyPVA/C0C43_SLI
bool[] x_dir
bool[] y_dir
bool[] z_dir
bool[] yaw
bool[] pitch
bool[] roll

"""
  __slots__ = ['Selected_joint_msg','Selected_link_msg','Selected_information_msg','Selected_link_information_msg']
  _slot_types = ['C43_LocalBodyPVA/C0C43_SJ','C43_LocalBodyPVA/C0C43_SL','C43_LocalBodyPVA/C0C43_SI','C43_LocalBodyPVA/C0C43_SLI']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Selected_joint_msg,Selected_link_msg,Selected_information_msg,Selected_link_information_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C43Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Selected_joint_msg is None:
        self.Selected_joint_msg = C43_LocalBodyPVA.msg.C0C43_SJ()
      if self.Selected_link_msg is None:
        self.Selected_link_msg = C43_LocalBodyPVA.msg.C0C43_SL()
      if self.Selected_information_msg is None:
        self.Selected_information_msg = C43_LocalBodyPVA.msg.C0C43_SI()
      if self.Selected_link_information_msg is None:
        self.Selected_link_information_msg = C43_LocalBodyPVA.msg.C0C43_SLI()
    else:
      self.Selected_joint_msg = C43_LocalBodyPVA.msg.C0C43_SJ()
      self.Selected_link_msg = C43_LocalBodyPVA.msg.C0C43_SL()
      self.Selected_information_msg = C43_LocalBodyPVA.msg.C0C43_SI()
      self.Selected_link_information_msg = C43_LocalBodyPVA.msg.C0C43_SLI()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Selected_joint_msg.Selected_Joint)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.Selected_joint_msg.Selected_Joint))
      length = len(self.Selected_link_msg.Selected_Link)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.Selected_link_msg.Selected_Link))
      length = len(self.Selected_information_msg.Selected_Position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_information_msg.Selected_Position))
      length = len(self.Selected_information_msg.Selected_Velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_information_msg.Selected_Velocity))
      length = len(self.Selected_information_msg.Selected_Acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_information_msg.Selected_Acceleration))
      length = len(self.Selected_link_information_msg.x_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_link_information_msg.x_dir))
      length = len(self.Selected_link_information_msg.y_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_link_information_msg.y_dir))
      length = len(self.Selected_link_information_msg.z_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_link_information_msg.z_dir))
      length = len(self.Selected_link_information_msg.yaw)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_link_information_msg.yaw))
      length = len(self.Selected_link_information_msg.pitch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_link_information_msg.pitch))
      length = len(self.Selected_link_information_msg.roll)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.Selected_link_information_msg.roll))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Selected_joint_msg is None:
        self.Selected_joint_msg = C43_LocalBodyPVA.msg.C0C43_SJ()
      if self.Selected_link_msg is None:
        self.Selected_link_msg = C43_LocalBodyPVA.msg.C0C43_SL()
      if self.Selected_information_msg is None:
        self.Selected_information_msg = C43_LocalBodyPVA.msg.C0C43_SI()
      if self.Selected_link_information_msg is None:
        self.Selected_link_information_msg = C43_LocalBodyPVA.msg.C0C43_SLI()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_joint_msg.Selected_Joint = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_msg.Selected_Link = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_information_msg.Selected_Position = struct.unpack(pattern, str[start:end])
      self.Selected_information_msg.Selected_Position = map(bool, self.Selected_information_msg.Selected_Position)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_information_msg.Selected_Velocity = struct.unpack(pattern, str[start:end])
      self.Selected_information_msg.Selected_Velocity = map(bool, self.Selected_information_msg.Selected_Velocity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_information_msg.Selected_Acceleration = struct.unpack(pattern, str[start:end])
      self.Selected_information_msg.Selected_Acceleration = map(bool, self.Selected_information_msg.Selected_Acceleration)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.x_dir = struct.unpack(pattern, str[start:end])
      self.Selected_link_information_msg.x_dir = map(bool, self.Selected_link_information_msg.x_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.y_dir = struct.unpack(pattern, str[start:end])
      self.Selected_link_information_msg.y_dir = map(bool, self.Selected_link_information_msg.y_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.z_dir = struct.unpack(pattern, str[start:end])
      self.Selected_link_information_msg.z_dir = map(bool, self.Selected_link_information_msg.z_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.yaw = struct.unpack(pattern, str[start:end])
      self.Selected_link_information_msg.yaw = map(bool, self.Selected_link_information_msg.yaw)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.pitch = struct.unpack(pattern, str[start:end])
      self.Selected_link_information_msg.pitch = map(bool, self.Selected_link_information_msg.pitch)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.roll = struct.unpack(pattern, str[start:end])
      self.Selected_link_information_msg.roll = map(bool, self.Selected_link_information_msg.roll)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Selected_joint_msg.Selected_Joint)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Selected_joint_msg.Selected_Joint.tostring())
      length = len(self.Selected_link_msg.Selected_Link)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Selected_link_msg.Selected_Link.tostring())
      length = len(self.Selected_information_msg.Selected_Position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_information_msg.Selected_Position.tostring())
      length = len(self.Selected_information_msg.Selected_Velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_information_msg.Selected_Velocity.tostring())
      length = len(self.Selected_information_msg.Selected_Acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_information_msg.Selected_Acceleration.tostring())
      length = len(self.Selected_link_information_msg.x_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_link_information_msg.x_dir.tostring())
      length = len(self.Selected_link_information_msg.y_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_link_information_msg.y_dir.tostring())
      length = len(self.Selected_link_information_msg.z_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_link_information_msg.z_dir.tostring())
      length = len(self.Selected_link_information_msg.yaw)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_link_information_msg.yaw.tostring())
      length = len(self.Selected_link_information_msg.pitch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_link_information_msg.pitch.tostring())
      length = len(self.Selected_link_information_msg.roll)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Selected_link_information_msg.roll.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Selected_joint_msg is None:
        self.Selected_joint_msg = C43_LocalBodyPVA.msg.C0C43_SJ()
      if self.Selected_link_msg is None:
        self.Selected_link_msg = C43_LocalBodyPVA.msg.C0C43_SL()
      if self.Selected_information_msg is None:
        self.Selected_information_msg = C43_LocalBodyPVA.msg.C0C43_SI()
      if self.Selected_link_information_msg is None:
        self.Selected_link_information_msg = C43_LocalBodyPVA.msg.C0C43_SLI()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_joint_msg.Selected_Joint = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_msg.Selected_Link = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_information_msg.Selected_Position = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_information_msg.Selected_Position = map(bool, self.Selected_information_msg.Selected_Position)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_information_msg.Selected_Velocity = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_information_msg.Selected_Velocity = map(bool, self.Selected_information_msg.Selected_Velocity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_information_msg.Selected_Acceleration = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_information_msg.Selected_Acceleration = map(bool, self.Selected_information_msg.Selected_Acceleration)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.x_dir = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_link_information_msg.x_dir = map(bool, self.Selected_link_information_msg.x_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.y_dir = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_link_information_msg.y_dir = map(bool, self.Selected_link_information_msg.y_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.z_dir = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_link_information_msg.z_dir = map(bool, self.Selected_link_information_msg.z_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.yaw = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_link_information_msg.yaw = map(bool, self.Selected_link_information_msg.yaw)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.pitch = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_link_information_msg.pitch = map(bool, self.Selected_link_information_msg.pitch)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.Selected_link_information_msg.roll = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Selected_link_information_msg.roll = map(bool, self.Selected_link_information_msg.roll)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from C43_LocalBodyPVA/C43Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C43_LocalBodyPVA.msg

class C43Response(genpy.Message):
  _md5sum = "201ff9d0c0b713a40f56d629abf3c03d"
  _type = "C43_LocalBodyPVA/C43Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C43_LocalBodyPVA/C43C0_JPVA PVA_of_requested_joint_msg
C43_LocalBodyPVA/C43C0_LPVA PVA_of_requested_link_local_ref_frame_msg


================================================================================
MSG: C43_LocalBodyPVA/C43C0_JPVA
float32[] PVA_of_requested_joint

================================================================================
MSG: C43_LocalBodyPVA/C43C0_LPVA
float32[] PVA_requested_link_local_reference_frame

"""
  __slots__ = ['PVA_of_requested_joint_msg','PVA_of_requested_link_local_ref_frame_msg']
  _slot_types = ['C43_LocalBodyPVA/C43C0_JPVA','C43_LocalBodyPVA/C43C0_LPVA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PVA_of_requested_joint_msg,PVA_of_requested_link_local_ref_frame_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C43Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PVA_of_requested_joint_msg is None:
        self.PVA_of_requested_joint_msg = C43_LocalBodyPVA.msg.C43C0_JPVA()
      if self.PVA_of_requested_link_local_ref_frame_msg is None:
        self.PVA_of_requested_link_local_ref_frame_msg = C43_LocalBodyPVA.msg.C43C0_LPVA()
    else:
      self.PVA_of_requested_joint_msg = C43_LocalBodyPVA.msg.C43C0_JPVA()
      self.PVA_of_requested_link_local_ref_frame_msg = C43_LocalBodyPVA.msg.C43C0_LPVA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.PVA_of_requested_joint_msg.PVA_of_requested_joint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.PVA_of_requested_joint_msg.PVA_of_requested_joint))
      length = len(self.PVA_of_requested_link_local_ref_frame_msg.PVA_requested_link_local_reference_frame)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.PVA_of_requested_link_local_ref_frame_msg.PVA_requested_link_local_reference_frame))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.PVA_of_requested_joint_msg is None:
        self.PVA_of_requested_joint_msg = C43_LocalBodyPVA.msg.C43C0_JPVA()
      if self.PVA_of_requested_link_local_ref_frame_msg is None:
        self.PVA_of_requested_link_local_ref_frame_msg = C43_LocalBodyPVA.msg.C43C0_LPVA()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.PVA_of_requested_joint_msg.PVA_of_requested_joint = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.PVA_of_requested_link_local_ref_frame_msg.PVA_requested_link_local_reference_frame = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.PVA_of_requested_joint_msg.PVA_of_requested_joint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.PVA_of_requested_joint_msg.PVA_of_requested_joint.tostring())
      length = len(self.PVA_of_requested_link_local_ref_frame_msg.PVA_requested_link_local_reference_frame)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.PVA_of_requested_link_local_ref_frame_msg.PVA_requested_link_local_reference_frame.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.PVA_of_requested_joint_msg is None:
        self.PVA_of_requested_joint_msg = C43_LocalBodyPVA.msg.C43C0_JPVA()
      if self.PVA_of_requested_link_local_ref_frame_msg is None:
        self.PVA_of_requested_link_local_ref_frame_msg = C43_LocalBodyPVA.msg.C43C0_LPVA()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.PVA_of_requested_joint_msg.PVA_of_requested_joint = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.PVA_of_requested_link_local_ref_frame_msg.PVA_requested_link_local_reference_frame = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class C43(object):
  _type          = 'C43_LocalBodyPVA/C43'
  _md5sum = '8df4dbe242e088d627919891d50cae63'
  _request_class  = C43Request
  _response_class = C43Response
