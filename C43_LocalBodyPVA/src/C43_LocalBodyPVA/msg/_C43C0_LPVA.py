"""autogenerated by genpy from C43_LocalBodyPVA/C43C0_LPVA.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class C43C0_LPVA(genpy.Message):
  _md5sum = "d54524fb14fee545b8aae8e4729b5c3f"
  _type = "C43_LocalBodyPVA/C43C0_LPVA"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] PVA_requested_link_local_reference_frame

"""
  __slots__ = ['PVA_requested_link_local_reference_frame']
  _slot_types = ['float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PVA_requested_link_local_reference_frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C43C0_LPVA, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PVA_requested_link_local_reference_frame is None:
        self.PVA_requested_link_local_reference_frame = []
    else:
      self.PVA_requested_link_local_reference_frame = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.PVA_requested_link_local_reference_frame)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.PVA_requested_link_local_reference_frame))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.PVA_requested_link_local_reference_frame = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.PVA_requested_link_local_reference_frame)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.PVA_requested_link_local_reference_frame.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.PVA_requested_link_local_reference_frame = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
