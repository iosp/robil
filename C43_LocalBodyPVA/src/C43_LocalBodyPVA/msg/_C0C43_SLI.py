"""autogenerated by genpy from C43_LocalBodyPVA/C0C43_SLI.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class C0C43_SLI(genpy.Message):
  _md5sum = "0743aafc02bec381b4880fc30ed5d230"
  _type = "C43_LocalBodyPVA/C0C43_SLI"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool[] x_dir
bool[] y_dir
bool[] z_dir
bool[] yaw
bool[] pitch
bool[] roll

"""
  __slots__ = ['x_dir','y_dir','z_dir','yaw','pitch','roll']
  _slot_types = ['bool[]','bool[]','bool[]','bool[]','bool[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_dir,y_dir,z_dir,yaw,pitch,roll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C0C43_SLI, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_dir is None:
        self.x_dir = []
      if self.y_dir is None:
        self.y_dir = []
      if self.z_dir is None:
        self.z_dir = []
      if self.yaw is None:
        self.yaw = []
      if self.pitch is None:
        self.pitch = []
      if self.roll is None:
        self.roll = []
    else:
      self.x_dir = []
      self.y_dir = []
      self.z_dir = []
      self.yaw = []
      self.pitch = []
      self.roll = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.x_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.x_dir))
      length = len(self.y_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.y_dir))
      length = len(self.z_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.z_dir))
      length = len(self.yaw)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.yaw))
      length = len(self.pitch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.pitch))
      length = len(self.roll)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.roll))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.x_dir = struct.unpack(pattern, str[start:end])
      self.x_dir = map(bool, self.x_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.y_dir = struct.unpack(pattern, str[start:end])
      self.y_dir = map(bool, self.y_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.z_dir = struct.unpack(pattern, str[start:end])
      self.z_dir = map(bool, self.z_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.yaw = struct.unpack(pattern, str[start:end])
      self.yaw = map(bool, self.yaw)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.pitch = struct.unpack(pattern, str[start:end])
      self.pitch = map(bool, self.pitch)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.roll = struct.unpack(pattern, str[start:end])
      self.roll = map(bool, self.roll)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.x_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.x_dir.tostring())
      length = len(self.y_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.y_dir.tostring())
      length = len(self.z_dir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.z_dir.tostring())
      length = len(self.yaw)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.yaw.tostring())
      length = len(self.pitch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.pitch.tostring())
      length = len(self.roll)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.roll.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.x_dir = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.x_dir = map(bool, self.x_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.y_dir = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.y_dir = map(bool, self.y_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.z_dir = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.z_dir = map(bool, self.z_dir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.yaw = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.yaw = map(bool, self.yaw)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.pitch = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.pitch = map(bool, self.pitch)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.roll = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.roll = map(bool, self.roll)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
