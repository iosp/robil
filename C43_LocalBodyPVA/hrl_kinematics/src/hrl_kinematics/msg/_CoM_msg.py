"""autogenerated by genpy from hrl_kinematics/CoM_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CoM_msg(genpy.Message):
  _md5sum = "1b4a3a32eedc46053102e9e6bf1750c5"
  _type = "hrl_kinematics/CoM_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This contains the position of 3 points that indicate the position
# of the Center of Mass in three different frames of coordinates:
# The first (num. 0) gives the CoM position in the root frame ("pelvis").
# The second (num. 1) gives the CoM position in the right foot frame ("r_foot"). 
# The third (num. 2) gives the CoM position in the left foot frame ("l_foot").

# geometry_msgs/Point root
# geometry_msgs/Point Rfoot
# geometry_msgs/Point Lfoot

float64[3] x 
float64[3] y
float64[3] z

"""
  __slots__ = ['x','y','z']
  _slot_types = ['float64[3]','float64[3]','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CoM_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = [0.,0.,0.]
      if self.y is None:
        self.y = [0.,0.,0.]
      if self.z is None:
        self.z = [0.,0.,0.]
    else:
      self.x = [0.,0.,0.]
      self.y = [0.,0.,0.]
      self.z = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_3d.pack(*self.x))
      buff.write(_struct_3d.pack(*self.y))
      buff.write(_struct_3d.pack(*self.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.x = _struct_3d.unpack(str[start:end])
      start = end
      end += 24
      self.y = _struct_3d.unpack(str[start:end])
      start = end
      end += 24
      self.z = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.x.tostring())
      buff.write(self.y.tostring())
      buff.write(self.z.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
