/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C43_LocalBodyPVA/msg/C0C43_SI.msg */
#ifndef C43_LOCALBODYPVA_MESSAGE_C0C43_SI_H
#define C43_LOCALBODYPVA_MESSAGE_C0C43_SI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C43_LocalBodyPVA
{
template <class ContainerAllocator>
struct C0C43_SI_ {
  typedef C0C43_SI_<ContainerAllocator> Type;

  C0C43_SI_()
  : Selected_Position()
  , Selected_Velocity()
  , Selected_Acceleration()
  {
  }

  C0C43_SI_(const ContainerAllocator& _alloc)
  : Selected_Position(_alloc)
  , Selected_Velocity(_alloc)
  , Selected_Acceleration(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _Selected_Position_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  Selected_Position;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _Selected_Velocity_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  Selected_Velocity;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _Selected_Acceleration_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  Selected_Acceleration;


  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C43_SI
typedef  ::C43_LocalBodyPVA::C0C43_SI_<std::allocator<void> > C0C43_SI;

typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SI> C0C43_SIPtr;
typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SI const> C0C43_SIConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C43_LocalBodyPVA

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a391a2d62a6c96b6facd69f878ed6a5";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1a391a2d62a6c96bULL;
  static const uint64_t static_value2 = 0x6facd69f878ed6a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C0C43_SI";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool[] Selected_Position\n\
bool[] Selected_Velocity\n\
bool[] Selected_Acceleration\n\
\n\
\n\
";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Selected_Position);
    stream.next(m.Selected_Velocity);
    stream.next(m.Selected_Acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C43_SI_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator> & v) 
  {
    s << indent << "Selected_Position[]" << std::endl;
    for (size_t i = 0; i < v.Selected_Position.size(); ++i)
    {
      s << indent << "  Selected_Position[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.Selected_Position[i]);
    }
    s << indent << "Selected_Velocity[]" << std::endl;
    for (size_t i = 0; i < v.Selected_Velocity.size(); ++i)
    {
      s << indent << "  Selected_Velocity[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.Selected_Velocity[i]);
    }
    s << indent << "Selected_Acceleration[]" << std::endl;
    for (size_t i = 0; i < v.Selected_Acceleration.size(); ++i)
    {
      s << indent << "  Selected_Acceleration[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.Selected_Acceleration[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C43_LOCALBODYPVA_MESSAGE_C0C43_SI_H

