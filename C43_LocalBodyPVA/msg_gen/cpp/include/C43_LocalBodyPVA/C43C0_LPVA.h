/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C43_LocalBodyPVA/msg/C43C0_LPVA.msg */
#ifndef C43_LOCALBODYPVA_MESSAGE_C43C0_LPVA_H
#define C43_LOCALBODYPVA_MESSAGE_C43C0_LPVA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C43_LocalBodyPVA
{
template <class ContainerAllocator>
struct C43C0_LPVA_ {
  typedef C43C0_LPVA_<ContainerAllocator> Type;

  C43C0_LPVA_()
  : PVA_requested_link_local_reference_frame()
  {
  }

  C43C0_LPVA_(const ContainerAllocator& _alloc)
  : PVA_requested_link_local_reference_frame(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PVA_requested_link_local_reference_frame_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PVA_requested_link_local_reference_frame;


  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C43C0_LPVA
typedef  ::C43_LocalBodyPVA::C43C0_LPVA_<std::allocator<void> > C43C0_LPVA;

typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43C0_LPVA> C43C0_LPVAPtr;
typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43C0_LPVA const> C43C0_LPVAConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C43_LocalBodyPVA

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d54524fb14fee545b8aae8e4729b5c3f";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd54524fb14fee545ULL;
  static const uint64_t static_value2 = 0xb8aae8e4729b5c3fULL;
};

template<class ContainerAllocator>
struct DataType< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43C0_LPVA";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] PVA_requested_link_local_reference_frame\n\
\n\
";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PVA_requested_link_local_reference_frame);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C43C0_LPVA_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator> & v) 
  {
    s << indent << "PVA_requested_link_local_reference_frame[]" << std::endl;
    for (size_t i = 0; i < v.PVA_requested_link_local_reference_frame.size(); ++i)
    {
      s << indent << "  PVA_requested_link_local_reference_frame[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PVA_requested_link_local_reference_frame[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C43_LOCALBODYPVA_MESSAGE_C43C0_LPVA_H

