/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C43_LocalBodyPVA/msg/C0C43_SLI.msg */
#ifndef C43_LOCALBODYPVA_MESSAGE_C0C43_SLI_H
#define C43_LOCALBODYPVA_MESSAGE_C0C43_SLI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C43_LocalBodyPVA
{
template <class ContainerAllocator>
struct C0C43_SLI_ {
  typedef C0C43_SLI_<ContainerAllocator> Type;

  C0C43_SLI_()
  : x_dir()
  , y_dir()
  , z_dir()
  , yaw()
  , pitch()
  , roll()
  {
  }

  C0C43_SLI_(const ContainerAllocator& _alloc)
  : x_dir(_alloc)
  , y_dir(_alloc)
  , z_dir(_alloc)
  , yaw(_alloc)
  , pitch(_alloc)
  , roll(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _x_dir_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  x_dir;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _y_dir_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  y_dir;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _z_dir_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  z_dir;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _yaw_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  yaw;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _pitch_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  pitch;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _roll_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  roll;


  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C43_SLI
typedef  ::C43_LocalBodyPVA::C0C43_SLI_<std::allocator<void> > C0C43_SLI;

typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SLI> C0C43_SLIPtr;
typedef boost::shared_ptr< ::C43_LocalBodyPVA::C0C43_SLI const> C0C43_SLIConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C43_LocalBodyPVA

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0743aafc02bec381b4880fc30ed5d230";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0743aafc02bec381ULL;
  static const uint64_t static_value2 = 0xb4880fc30ed5d230ULL;
};

template<class ContainerAllocator>
struct DataType< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C0C43_SLI";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool[] x_dir\n\
bool[] y_dir\n\
bool[] z_dir\n\
bool[] yaw\n\
bool[] pitch\n\
bool[] roll\n\
\n\
";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_dir);
    stream.next(m.y_dir);
    stream.next(m.z_dir);
    stream.next(m.yaw);
    stream.next(m.pitch);
    stream.next(m.roll);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C43_SLI_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator> & v) 
  {
    s << indent << "x_dir[]" << std::endl;
    for (size_t i = 0; i < v.x_dir.size(); ++i)
    {
      s << indent << "  x_dir[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.x_dir[i]);
    }
    s << indent << "y_dir[]" << std::endl;
    for (size_t i = 0; i < v.y_dir.size(); ++i)
    {
      s << indent << "  y_dir[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.y_dir[i]);
    }
    s << indent << "z_dir[]" << std::endl;
    for (size_t i = 0; i < v.z_dir.size(); ++i)
    {
      s << indent << "  z_dir[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.z_dir[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "pitch[]" << std::endl;
    for (size_t i = 0; i < v.pitch.size(); ++i)
    {
      s << indent << "  pitch[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pitch[i]);
    }
    s << indent << "roll[]" << std::endl;
    for (size_t i = 0; i < v.roll.size(); ++i)
    {
      s << indent << "  roll[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.roll[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C43_LOCALBODYPVA_MESSAGE_C0C43_SLI_H

