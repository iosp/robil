/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C43_LocalBodyPVA/srv/C43.srv */
#ifndef C43_LOCALBODYPVA_SERVICE_C43_H
#define C43_LOCALBODYPVA_SERVICE_C43_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C43_LocalBodyPVA/C0C43_SJ.h"
#include "C43_LocalBodyPVA/C0C43_SL.h"
#include "C43_LocalBodyPVA/C0C43_SI.h"
#include "C43_LocalBodyPVA/C0C43_SLI.h"


#include "C43_LocalBodyPVA/C43C0_JPVA.h"
#include "C43_LocalBodyPVA/C43C0_LPVA.h"

namespace C43_LocalBodyPVA
{
template <class ContainerAllocator>
struct C43Request_ {
  typedef C43Request_<ContainerAllocator> Type;

  C43Request_()
  : Selected_joint_msg()
  , Selected_link_msg()
  , Selected_information_msg()
  , Selected_link_information_msg()
  {
  }

  C43Request_(const ContainerAllocator& _alloc)
  : Selected_joint_msg(_alloc)
  , Selected_link_msg(_alloc)
  , Selected_information_msg(_alloc)
  , Selected_link_information_msg(_alloc)
  {
  }

  typedef  ::C43_LocalBodyPVA::C0C43_SJ_<ContainerAllocator>  _Selected_joint_msg_type;
   ::C43_LocalBodyPVA::C0C43_SJ_<ContainerAllocator>  Selected_joint_msg;

  typedef  ::C43_LocalBodyPVA::C0C43_SL_<ContainerAllocator>  _Selected_link_msg_type;
   ::C43_LocalBodyPVA::C0C43_SL_<ContainerAllocator>  Selected_link_msg;

  typedef  ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator>  _Selected_information_msg_type;
   ::C43_LocalBodyPVA::C0C43_SI_<ContainerAllocator>  Selected_information_msg;

  typedef  ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator>  _Selected_link_information_msg_type;
   ::C43_LocalBodyPVA::C0C43_SLI_<ContainerAllocator>  Selected_link_information_msg;


  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C43Request
typedef  ::C43_LocalBodyPVA::C43Request_<std::allocator<void> > C43Request;

typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Request> C43RequestPtr;
typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Request const> C43RequestConstPtr;


template <class ContainerAllocator>
struct C43Response_ {
  typedef C43Response_<ContainerAllocator> Type;

  C43Response_()
  : PVA_of_requested_joint_msg()
  , PVA_of_requested_link_local_ref_frame_msg()
  {
  }

  C43Response_(const ContainerAllocator& _alloc)
  : PVA_of_requested_joint_msg(_alloc)
  , PVA_of_requested_link_local_ref_frame_msg(_alloc)
  {
  }

  typedef  ::C43_LocalBodyPVA::C43C0_JPVA_<ContainerAllocator>  _PVA_of_requested_joint_msg_type;
   ::C43_LocalBodyPVA::C43C0_JPVA_<ContainerAllocator>  PVA_of_requested_joint_msg;

  typedef  ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator>  _PVA_of_requested_link_local_ref_frame_msg_type;
   ::C43_LocalBodyPVA::C43C0_LPVA_<ContainerAllocator>  PVA_of_requested_link_local_ref_frame_msg;


  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C43Response
typedef  ::C43_LocalBodyPVA::C43Response_<std::allocator<void> > C43Response;

typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Response> C43ResponsePtr;
typedef boost::shared_ptr< ::C43_LocalBodyPVA::C43Response const> C43ResponseConstPtr;

struct C43
{

typedef C43Request Request;
typedef C43Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C43
} // namespace C43_LocalBodyPVA

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b39c0ca6a41fec46e6d9000493187b69";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb39c0ca6a41fec46ULL;
  static const uint64_t static_value2 = 0xe6d9000493187b69ULL;
};

template<class ContainerAllocator>
struct DataType< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43Request";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C0C43_SJ Selected_joint_msg\n\
C43_LocalBodyPVA/C0C43_SL Selected_link_msg\n\
C43_LocalBodyPVA/C0C43_SI Selected_information_msg\n\
C43_LocalBodyPVA/C0C43_SLI Selected_link_information_msg\n\
\n\
================================================================================\n\
MSG: C43_LocalBodyPVA/C0C43_SJ\n\
int32[] Selected_Joint\n\
\n\
================================================================================\n\
MSG: C43_LocalBodyPVA/C0C43_SL\n\
int32[] Selected_Link\n\
\n\
================================================================================\n\
MSG: C43_LocalBodyPVA/C0C43_SI\n\
bool[] Selected_Position\n\
bool[] Selected_Velocity\n\
bool[] Selected_Acceleration\n\
\n\
\n\
================================================================================\n\
MSG: C43_LocalBodyPVA/C0C43_SLI\n\
bool[] x_dir\n\
bool[] y_dir\n\
bool[] z_dir\n\
bool[] yaw\n\
bool[] pitch\n\
bool[] roll\n\
\n\
";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "201ff9d0c0b713a40f56d629abf3c03d";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x201ff9d0c0b713a4ULL;
  static const uint64_t static_value2 = 0x0f56d629abf3c03dULL;
};

template<class ContainerAllocator>
struct DataType< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43Response";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43C0_JPVA PVA_of_requested_joint_msg\n\
C43_LocalBodyPVA/C43C0_LPVA PVA_of_requested_link_local_ref_frame_msg\n\
\n\
\n\
================================================================================\n\
MSG: C43_LocalBodyPVA/C43C0_JPVA\n\
float32[] PVA_of_requested_joint\n\
\n\
================================================================================\n\
MSG: C43_LocalBodyPVA/C43C0_LPVA\n\
float32[] PVA_requested_link_local_reference_frame\n\
\n\
";
  }

  static const char* value(const  ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C43_LocalBodyPVA::C43Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Selected_joint_msg);
    stream.next(m.Selected_link_msg);
    stream.next(m.Selected_information_msg);
    stream.next(m.Selected_link_information_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C43Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C43_LocalBodyPVA::C43Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PVA_of_requested_joint_msg);
    stream.next(m.PVA_of_requested_link_local_ref_frame_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C43Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C43_LocalBodyPVA::C43> {
  static const char* value() 
  {
    return "8df4dbe242e088d627919891d50cae63";
  }

  static const char* value(const C43_LocalBodyPVA::C43&) { return value(); } 
};

template<>
struct DataType<C43_LocalBodyPVA::C43> {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43";
  }

  static const char* value(const C43_LocalBodyPVA::C43&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C43_LocalBodyPVA::C43Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8df4dbe242e088d627919891d50cae63";
  }

  static const char* value(const C43_LocalBodyPVA::C43Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C43_LocalBodyPVA::C43Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43";
  }

  static const char* value(const C43_LocalBodyPVA::C43Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C43_LocalBodyPVA::C43Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8df4dbe242e088d627919891d50cae63";
  }

  static const char* value(const C43_LocalBodyPVA::C43Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C43_LocalBodyPVA::C43Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C43_LocalBodyPVA/C43";
  }

  static const char* value(const C43_LocalBodyPVA::C43Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C43_LOCALBODYPVA_SERVICE_C43_H

