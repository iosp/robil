/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C31_PathPlanner/msg/ppWaypoints.msg */
#ifndef C31_PATHPLANNER_MESSAGE_PPWAYPOINTS_H
#define C31_PATHPLANNER_MESSAGE_PPWAYPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C31_PathPlanner/ppLocation.h"

namespace C31_PathPlanner
{
template <class ContainerAllocator>
struct ppWaypoints_ {
  typedef ppWaypoints_<ContainerAllocator> Type;

  ppWaypoints_()
  : points()
  {
  }

  ppWaypoints_(const ContainerAllocator& _alloc)
  : points(_alloc)
  {
  }

  typedef std::vector< ::C31_PathPlanner::ppLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C31_PathPlanner::ppLocation_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::C31_PathPlanner::ppLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C31_PathPlanner::ppLocation_<ContainerAllocator> >::other >  points;


  typedef boost::shared_ptr< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ppWaypoints
typedef  ::C31_PathPlanner::ppWaypoints_<std::allocator<void> > ppWaypoints;

typedef boost::shared_ptr< ::C31_PathPlanner::ppWaypoints> ppWaypointsPtr;
typedef boost::shared_ptr< ::C31_PathPlanner::ppWaypoints const> ppWaypointsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C31_PathPlanner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ffd74dfa964a04e3f477faa3684da1c6";
  }

  static const char* value(const  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xffd74dfa964a04e3ULL;
  static const uint64_t static_value2 = 0xf477faa3684da1c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppWaypoints";
  }

  static const char* value(const  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppLocation[] points\n\
================================================================================\n\
MSG: C31_PathPlanner/ppLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ppWaypoints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator> & v) 
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C31_PathPlanner::ppLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C31_PATHPLANNER_MESSAGE_PPWAYPOINTS_H

