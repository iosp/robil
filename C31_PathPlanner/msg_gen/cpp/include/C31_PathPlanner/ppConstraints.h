/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C31_PathPlanner/msg/ppConstraints.msg */
#ifndef C31_PATHPLANNER_MESSAGE_PPCONSTRAINTS_H
#define C31_PATHPLANNER_MESSAGE_PPCONSTRAINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C31_PathPlanner/ppCorridor.h"
#include "C31_PathPlanner/ppRobotDimension.h"
#include "C31_PathPlanner/ppCharge.h"
#include "C31_PathPlanner/ppCharge.h"

namespace C31_PathPlanner
{
template <class ContainerAllocator>
struct ppConstraints_ {
  typedef ppConstraints_<ContainerAllocator> Type;

  ppConstraints_()
  : corridor()
  , robot()
  , attractors()
  , repulsors()
  {
  }

  ppConstraints_(const ContainerAllocator& _alloc)
  : corridor(_alloc)
  , robot(_alloc)
  , attractors(_alloc)
  , repulsors(_alloc)
  {
  }

  typedef  ::C31_PathPlanner::ppCorridor_<ContainerAllocator>  _corridor_type;
   ::C31_PathPlanner::ppCorridor_<ContainerAllocator>  corridor;

  typedef  ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator>  _robot_type;
   ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator>  robot;

  typedef std::vector< ::C31_PathPlanner::ppCharge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C31_PathPlanner::ppCharge_<ContainerAllocator> >::other >  _attractors_type;
  std::vector< ::C31_PathPlanner::ppCharge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C31_PathPlanner::ppCharge_<ContainerAllocator> >::other >  attractors;

  typedef std::vector< ::C31_PathPlanner::ppCharge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C31_PathPlanner::ppCharge_<ContainerAllocator> >::other >  _repulsors_type;
  std::vector< ::C31_PathPlanner::ppCharge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C31_PathPlanner::ppCharge_<ContainerAllocator> >::other >  repulsors;


  typedef boost::shared_ptr< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::ppConstraints_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ppConstraints
typedef  ::C31_PathPlanner::ppConstraints_<std::allocator<void> > ppConstraints;

typedef boost::shared_ptr< ::C31_PathPlanner::ppConstraints> ppConstraintsPtr;
typedef boost::shared_ptr< ::C31_PathPlanner::ppConstraints const> ppConstraintsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C31_PathPlanner::ppConstraints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C31_PathPlanner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppConstraints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7a1e2b18a0da9e12a6b2094e7a916c5c";
  }

  static const char* value(const  ::C31_PathPlanner::ppConstraints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7a1e2b18a0da9e12ULL;
  static const uint64_t static_value2 = 0xa6b2094e7a916c5cULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppConstraints";
  }

  static const char* value(const  ::C31_PathPlanner::ppConstraints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppCorridor corridor\n\
C31_PathPlanner/ppRobotDimension robot\n\
C31_PathPlanner/ppCharge[] attractors\n\
C31_PathPlanner/ppCharge[] repulsors\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppCorridor\n\
float64 width\n\
================================================================================\n\
MSG: C31_PathPlanner/ppRobotDimension\n\
float64 size\n\
================================================================================\n\
MSG: C31_PathPlanner/ppCharge\n\
C31_PathPlanner/ppLocation location\n\
float64 power\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::ppConstraints_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.corridor);
    stream.next(m.robot);
    stream.next(m.attractors);
    stream.next(m.repulsors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ppConstraints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C31_PathPlanner::ppConstraints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C31_PathPlanner::ppConstraints_<ContainerAllocator> & v) 
  {
    s << indent << "corridor: ";
s << std::endl;
    Printer< ::C31_PathPlanner::ppCorridor_<ContainerAllocator> >::stream(s, indent + "  ", v.corridor);
    s << indent << "robot: ";
s << std::endl;
    Printer< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> >::stream(s, indent + "  ", v.robot);
    s << indent << "attractors[]" << std::endl;
    for (size_t i = 0; i < v.attractors.size(); ++i)
    {
      s << indent << "  attractors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C31_PathPlanner::ppCharge_<ContainerAllocator> >::stream(s, indent + "    ", v.attractors[i]);
    }
    s << indent << "repulsors[]" << std::endl;
    for (size_t i = 0; i < v.repulsors.size(); ++i)
    {
      s << indent << "  repulsors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C31_PathPlanner::ppCharge_<ContainerAllocator> >::stream(s, indent + "    ", v.repulsors[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C31_PATHPLANNER_MESSAGE_PPCONSTRAINTS_H

