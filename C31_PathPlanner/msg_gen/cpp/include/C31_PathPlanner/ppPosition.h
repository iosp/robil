/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C31_PathPlanner/msg/ppPosition.msg */
#ifndef C31_PATHPLANNER_MESSAGE_PPPOSITION_H
#define C31_PATHPLANNER_MESSAGE_PPPOSITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C31_PathPlanner/ppLocation.h"

namespace C31_PathPlanner
{
template <class ContainerAllocator>
struct ppPosition_ {
  typedef ppPosition_<ContainerAllocator> Type;

  ppPosition_()
  : location()
  , orientation(0.0)
  {
  }

  ppPosition_(const ContainerAllocator& _alloc)
  : location(_alloc)
  , orientation(0.0)
  {
  }

  typedef  ::C31_PathPlanner::ppLocation_<ContainerAllocator>  _location_type;
   ::C31_PathPlanner::ppLocation_<ContainerAllocator>  location;

  typedef double _orientation_type;
  double orientation;


  typedef boost::shared_ptr< ::C31_PathPlanner::ppPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::ppPosition_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ppPosition
typedef  ::C31_PathPlanner::ppPosition_<std::allocator<void> > ppPosition;

typedef boost::shared_ptr< ::C31_PathPlanner::ppPosition> ppPositionPtr;
typedef boost::shared_ptr< ::C31_PathPlanner::ppPosition const> ppPositionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C31_PathPlanner::ppPosition_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C31_PathPlanner::ppPosition_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C31_PathPlanner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppPosition_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppPosition_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::ppPosition_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9befbb2fd26d643952bfcff3d40633ff";
  }

  static const char* value(const  ::C31_PathPlanner::ppPosition_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9befbb2fd26d6439ULL;
  static const uint64_t static_value2 = 0x52bfcff3d40633ffULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::ppPosition_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppPosition";
  }

  static const char* value(const  ::C31_PathPlanner::ppPosition_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::ppPosition_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppLocation location\n\
float64 orientation\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::ppPosition_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C31_PathPlanner::ppPosition_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::ppPosition_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ppPosition_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C31_PathPlanner::ppPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C31_PathPlanner::ppPosition_<ContainerAllocator> & v) 
  {
    s << indent << "location: ";
s << std::endl;
    Printer< ::C31_PathPlanner::ppLocation_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "orientation: ";
    Printer<double>::stream(s, indent + "  ", v.orientation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C31_PATHPLANNER_MESSAGE_PPPOSITION_H

