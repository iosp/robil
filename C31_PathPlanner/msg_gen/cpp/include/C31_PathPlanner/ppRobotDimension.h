/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C31_PathPlanner/msg/ppRobotDimension.msg */
#ifndef C31_PATHPLANNER_MESSAGE_PPROBOTDIMENSION_H
#define C31_PATHPLANNER_MESSAGE_PPROBOTDIMENSION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C31_PathPlanner
{
template <class ContainerAllocator>
struct ppRobotDimension_ {
  typedef ppRobotDimension_<ContainerAllocator> Type;

  ppRobotDimension_()
  : size(0.0)
  {
  }

  ppRobotDimension_(const ContainerAllocator& _alloc)
  : size(0.0)
  {
  }

  typedef double _size_type;
  double size;


  typedef boost::shared_ptr< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ppRobotDimension
typedef  ::C31_PathPlanner::ppRobotDimension_<std::allocator<void> > ppRobotDimension;

typedef boost::shared_ptr< ::C31_PathPlanner::ppRobotDimension> ppRobotDimensionPtr;
typedef boost::shared_ptr< ::C31_PathPlanner::ppRobotDimension const> ppRobotDimensionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C31_PathPlanner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3aa6cfa06a5f47b42010d9cec2c18e56";
  }

  static const char* value(const  ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3aa6cfa06a5f47b4ULL;
  static const uint64_t static_value2 = 0x2010d9cec2c18e56ULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppRobotDimension";
  }

  static const char* value(const  ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 size\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ppRobotDimension_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C31_PathPlanner::ppRobotDimension_<ContainerAllocator> & v) 
  {
    s << indent << "size: ";
    Printer<double>::stream(s, indent + "  ", v.size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C31_PATHPLANNER_MESSAGE_PPROBOTDIMENSION_H

