/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C31_PathPlanner/msg/ppMap.msg */
#ifndef C31_PATHPLANNER_MESSAGE_PPMAP_H
#define C31_PATHPLANNER_MESSAGE_PPMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C31_PathPlanner/ppPosition.h"

namespace C31_PathPlanner
{
template <class ContainerAllocator>
struct ppMap_ {
  typedef ppMap_<ContainerAllocator> Type;

  ppMap_()
  : width(0)
  , height(0)
  , data()
  , resolution(0.0)
  , offset()
  {
  }

  ppMap_(const ContainerAllocator& _alloc)
  : width(0)
  , height(0)
  , data(_alloc)
  , resolution(0.0)
  , offset(_alloc)
  {
  }

  typedef uint32_t _width_type;
  uint32_t width;

  typedef uint32_t _height_type;
  uint32_t height;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;

  typedef double _resolution_type;
  double resolution;

  typedef  ::C31_PathPlanner::ppPosition_<ContainerAllocator>  _offset_type;
   ::C31_PathPlanner::ppPosition_<ContainerAllocator>  offset;


  typedef boost::shared_ptr< ::C31_PathPlanner::ppMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::ppMap_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ppMap
typedef  ::C31_PathPlanner::ppMap_<std::allocator<void> > ppMap;

typedef boost::shared_ptr< ::C31_PathPlanner::ppMap> ppMapPtr;
typedef boost::shared_ptr< ::C31_PathPlanner::ppMap const> ppMapConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C31_PathPlanner::ppMap_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C31_PathPlanner::ppMap_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C31_PathPlanner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppMap_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::ppMap_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::ppMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6bd28798f148be55ec9ac5d215d9a747";
  }

  static const char* value(const  ::C31_PathPlanner::ppMap_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6bd28798f148be55ULL;
  static const uint64_t static_value2 = 0xec9ac5d215d9a747ULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::ppMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppMap";
  }

  static const char* value(const  ::C31_PathPlanner::ppMap_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::ppMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 width \n\
uint32 height\n\
uint8[] data\n\
float64 resolution\n\
C31_PathPlanner/ppPosition offset\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppPosition\n\
C31_PathPlanner/ppLocation location\n\
float64 orientation\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::ppMap_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::ppMap_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.data);
    stream.next(m.resolution);
    stream.next(m.offset);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ppMap_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C31_PathPlanner::ppMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C31_PathPlanner::ppMap_<ContainerAllocator> & v) 
  {
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
    s << indent << "offset: ";
s << std::endl;
    Printer< ::C31_PathPlanner::ppPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C31_PATHPLANNER_MESSAGE_PPMAP_H

