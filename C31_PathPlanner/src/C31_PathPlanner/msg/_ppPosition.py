"""autogenerated by genpy from C31_PathPlanner/ppPosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class ppPosition(genpy.Message):
  _md5sum = "9befbb2fd26d643952bfcff3d40633ff"
  _type = "C31_PathPlanner/ppPosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/ppLocation location
float64 orientation

================================================================================
MSG: C31_PathPlanner/ppLocation
float64 lat
float64 lon
"""
  __slots__ = ['location','orientation']
  _slot_types = ['C31_PathPlanner/ppLocation','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       location,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ppPosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.location is None:
        self.location = C31_PathPlanner.msg.ppLocation()
      if self.orientation is None:
        self.orientation = 0.
    else:
      self.location = C31_PathPlanner.msg.ppLocation()
      self.orientation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.location.lat, _x.location.lon, _x.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.location is None:
        self.location = C31_PathPlanner.msg.ppLocation()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.location.lat, _x.location.lon, _x.orientation,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.location.lat, _x.location.lon, _x.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.location is None:
        self.location = C31_PathPlanner.msg.ppLocation()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.location.lat, _x.location.lon, _x.orientation,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
