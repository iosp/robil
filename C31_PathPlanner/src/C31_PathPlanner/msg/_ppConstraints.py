"""autogenerated by genpy from C31_PathPlanner/ppConstraints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class ppConstraints(genpy.Message):
  _md5sum = "7a1e2b18a0da9e12a6b2094e7a916c5c"
  _type = "C31_PathPlanner/ppConstraints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/ppCorridor corridor
C31_PathPlanner/ppRobotDimension robot
C31_PathPlanner/ppCharge[] attractors
C31_PathPlanner/ppCharge[] repulsors

================================================================================
MSG: C31_PathPlanner/ppCorridor
float64 width
================================================================================
MSG: C31_PathPlanner/ppRobotDimension
float64 size
================================================================================
MSG: C31_PathPlanner/ppCharge
C31_PathPlanner/ppLocation location
float64 power

================================================================================
MSG: C31_PathPlanner/ppLocation
float64 lat
float64 lon
"""
  __slots__ = ['corridor','robot','attractors','repulsors']
  _slot_types = ['C31_PathPlanner/ppCorridor','C31_PathPlanner/ppRobotDimension','C31_PathPlanner/ppCharge[]','C31_PathPlanner/ppCharge[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       corridor,robot,attractors,repulsors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ppConstraints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.corridor is None:
        self.corridor = C31_PathPlanner.msg.ppCorridor()
      if self.robot is None:
        self.robot = C31_PathPlanner.msg.ppRobotDimension()
      if self.attractors is None:
        self.attractors = []
      if self.repulsors is None:
        self.repulsors = []
    else:
      self.corridor = C31_PathPlanner.msg.ppCorridor()
      self.robot = C31_PathPlanner.msg.ppRobotDimension()
      self.attractors = []
      self.repulsors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.corridor.width, _x.robot.size))
      length = len(self.attractors)
      buff.write(_struct_I.pack(length))
      for val1 in self.attractors:
        _v1 = val1.location
        _x = _v1
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
      length = len(self.repulsors)
      buff.write(_struct_I.pack(length))
      for val1 in self.repulsors:
        _v2 = val1.location
        _x = _v2
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.corridor is None:
        self.corridor = C31_PathPlanner.msg.ppCorridor()
      if self.robot is None:
        self.robot = C31_PathPlanner.msg.ppRobotDimension()
      if self.attractors is None:
        self.attractors = None
      if self.repulsors is None:
        self.repulsors = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.corridor.width, _x.robot.size,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.attractors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v3 = val1.location
        _x = _v3
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.attractors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.repulsors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v4 = val1.location
        _x = _v4
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.repulsors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.corridor.width, _x.robot.size))
      length = len(self.attractors)
      buff.write(_struct_I.pack(length))
      for val1 in self.attractors:
        _v5 = val1.location
        _x = _v5
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
      length = len(self.repulsors)
      buff.write(_struct_I.pack(length))
      for val1 in self.repulsors:
        _v6 = val1.location
        _x = _v6
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.corridor is None:
        self.corridor = C31_PathPlanner.msg.ppCorridor()
      if self.robot is None:
        self.robot = C31_PathPlanner.msg.ppRobotDimension()
      if self.attractors is None:
        self.attractors = None
      if self.repulsors is None:
        self.repulsors = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.corridor.width, _x.robot.size,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.attractors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v7 = val1.location
        _x = _v7
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.attractors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.repulsors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v8 = val1.location
        _x = _v8
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.repulsors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_d = struct.Struct("<d")
