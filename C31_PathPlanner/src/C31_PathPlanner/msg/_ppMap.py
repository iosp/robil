"""autogenerated by genpy from C31_PathPlanner/ppMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class ppMap(genpy.Message):
  _md5sum = "6bd28798f148be55ec9ac5d215d9a747"
  _type = "C31_PathPlanner/ppMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 width 
uint32 height
uint8[] data
float64 resolution
C31_PathPlanner/ppPosition offset

================================================================================
MSG: C31_PathPlanner/ppPosition
C31_PathPlanner/ppLocation location
float64 orientation

================================================================================
MSG: C31_PathPlanner/ppLocation
float64 lat
float64 lon
"""
  __slots__ = ['width','height','data','resolution','offset']
  _slot_types = ['uint32','uint32','uint8[]','float64','C31_PathPlanner/ppPosition']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width,height,data,resolution,offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ppMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.data is None:
        self.data = ''
      if self.resolution is None:
        self.resolution = 0.
      if self.offset is None:
        self.offset = C31_PathPlanner.msg.ppPosition()
    else:
      self.width = 0
      self.height = 0
      self.data = ''
      self.resolution = 0.
      self.offset = C31_PathPlanner.msg.ppPosition()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.width, _x.height))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.resolution, _x.offset.location.lat, _x.offset.location.lon, _x.offset.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.offset is None:
        self.offset = C31_PathPlanner.msg.ppPosition()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.width, _x.height,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data = str[start:end].decode('utf-8')
      else:
        self.data = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.resolution, _x.offset.location.lat, _x.offset.location.lon, _x.offset.orientation,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.width, _x.height))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.resolution, _x.offset.location.lat, _x.offset.location.lon, _x.offset.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.offset is None:
        self.offset = C31_PathPlanner.msg.ppPosition()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.width, _x.height,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data = str[start:end].decode('utf-8')
      else:
        self.data = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.resolution, _x.offset.location.lat, _x.offset.location.lon, _x.offset.orientation,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
