"""autogenerated by genpy from C31_PathPlanner/PathPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class PathPlanRequest(genpy.Message):
  _md5sum = "73bccb884ec321962a21dc7c29df8109"
  _type = "C31_PathPlanner/PathPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/ppMap map
C31_PathPlanner/ppConstraints constraints
C31_PathPlanner/ppLocation start
C31_PathPlanner/ppLocation destination
C31_PathPlanner/ppWaypoints path
uint8 algorith
C31_PathPlanner/ppRequirements requirements

================================================================================
MSG: C31_PathPlanner/ppMap
uint32 width 
uint32 height
uint8[] data
float64 resolution
C31_PathPlanner/ppPosition offset

================================================================================
MSG: C31_PathPlanner/ppPosition
C31_PathPlanner/ppLocation location
float64 orientation

================================================================================
MSG: C31_PathPlanner/ppLocation
float64 lat
float64 lon
================================================================================
MSG: C31_PathPlanner/ppConstraints
C31_PathPlanner/ppCorridor corridor
C31_PathPlanner/ppRobotDimension robot
C31_PathPlanner/ppCharge[] attractors
C31_PathPlanner/ppCharge[] repulsors

================================================================================
MSG: C31_PathPlanner/ppCorridor
float64 width
================================================================================
MSG: C31_PathPlanner/ppRobotDimension
float64 size
================================================================================
MSG: C31_PathPlanner/ppCharge
C31_PathPlanner/ppLocation location
float64 power

================================================================================
MSG: C31_PathPlanner/ppWaypoints
C31_PathPlanner/ppLocation[] points
================================================================================
MSG: C31_PathPlanner/ppRequirements
float64 wpd
"""
  __slots__ = ['map','constraints','start','destination','path','algorith','requirements']
  _slot_types = ['C31_PathPlanner/ppMap','C31_PathPlanner/ppConstraints','C31_PathPlanner/ppLocation','C31_PathPlanner/ppLocation','C31_PathPlanner/ppWaypoints','uint8','C31_PathPlanner/ppRequirements']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       map,constraints,start,destination,path,algorith,requirements

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.map is None:
        self.map = C31_PathPlanner.msg.ppMap()
      if self.constraints is None:
        self.constraints = C31_PathPlanner.msg.ppConstraints()
      if self.start is None:
        self.start = C31_PathPlanner.msg.ppLocation()
      if self.destination is None:
        self.destination = C31_PathPlanner.msg.ppLocation()
      if self.path is None:
        self.path = C31_PathPlanner.msg.ppWaypoints()
      if self.algorith is None:
        self.algorith = 0
      if self.requirements is None:
        self.requirements = C31_PathPlanner.msg.ppRequirements()
    else:
      self.map = C31_PathPlanner.msg.ppMap()
      self.constraints = C31_PathPlanner.msg.ppConstraints()
      self.start = C31_PathPlanner.msg.ppLocation()
      self.destination = C31_PathPlanner.msg.ppLocation()
      self.path = C31_PathPlanner.msg.ppWaypoints()
      self.algorith = 0
      self.requirements = C31_PathPlanner.msg.ppRequirements()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.map.width, _x.map.height))
      _x = self.map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.map.resolution, _x.map.offset.location.lat, _x.map.offset.location.lon, _x.map.offset.orientation, _x.constraints.corridor.width, _x.constraints.robot.size))
      length = len(self.constraints.attractors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.attractors:
        _v1 = val1.location
        _x = _v1
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
      length = len(self.constraints.repulsors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.repulsors:
        _v2 = val1.location
        _x = _v2
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
      _x = self
      buff.write(_struct_4d.pack(_x.start.lat, _x.start.lon, _x.destination.lat, _x.destination.lon))
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
      _x = self
      buff.write(_struct_Bd.pack(_x.algorith, _x.requirements.wpd))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.map is None:
        self.map = C31_PathPlanner.msg.ppMap()
      if self.constraints is None:
        self.constraints = C31_PathPlanner.msg.ppConstraints()
      if self.start is None:
        self.start = C31_PathPlanner.msg.ppLocation()
      if self.destination is None:
        self.destination = C31_PathPlanner.msg.ppLocation()
      if self.path is None:
        self.path = C31_PathPlanner.msg.ppWaypoints()
      if self.requirements is None:
        self.requirements = C31_PathPlanner.msg.ppRequirements()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.map.width, _x.map.height,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.data = str[start:end].decode('utf-8')
      else:
        self.map.data = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.map.resolution, _x.map.offset.location.lat, _x.map.offset.location.lon, _x.map.offset.orientation, _x.constraints.corridor.width, _x.constraints.robot.size,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.attractors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v3 = val1.location
        _x = _v3
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.constraints.attractors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.repulsors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v4 = val1.location
        _x = _v4
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.constraints.repulsors.append(val1)
      _x = self
      start = end
      end += 32
      (_x.start.lat, _x.start.lon, _x.destination.lat, _x.destination.lon,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppLocation()
        _x = val1
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        self.path.points.append(val1)
      _x = self
      start = end
      end += 9
      (_x.algorith, _x.requirements.wpd,) = _struct_Bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.map.width, _x.map.height))
      _x = self.map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.map.resolution, _x.map.offset.location.lat, _x.map.offset.location.lon, _x.map.offset.orientation, _x.constraints.corridor.width, _x.constraints.robot.size))
      length = len(self.constraints.attractors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.attractors:
        _v5 = val1.location
        _x = _v5
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
      length = len(self.constraints.repulsors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.repulsors:
        _v6 = val1.location
        _x = _v6
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
        buff.write(_struct_d.pack(val1.power))
      _x = self
      buff.write(_struct_4d.pack(_x.start.lat, _x.start.lon, _x.destination.lat, _x.destination.lon))
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
      _x = self
      buff.write(_struct_Bd.pack(_x.algorith, _x.requirements.wpd))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.map is None:
        self.map = C31_PathPlanner.msg.ppMap()
      if self.constraints is None:
        self.constraints = C31_PathPlanner.msg.ppConstraints()
      if self.start is None:
        self.start = C31_PathPlanner.msg.ppLocation()
      if self.destination is None:
        self.destination = C31_PathPlanner.msg.ppLocation()
      if self.path is None:
        self.path = C31_PathPlanner.msg.ppWaypoints()
      if self.requirements is None:
        self.requirements = C31_PathPlanner.msg.ppRequirements()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.map.width, _x.map.height,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.data = str[start:end].decode('utf-8')
      else:
        self.map.data = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.map.resolution, _x.map.offset.location.lat, _x.map.offset.location.lon, _x.map.offset.orientation, _x.constraints.corridor.width, _x.constraints.robot.size,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.attractors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v7 = val1.location
        _x = _v7
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.constraints.attractors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.repulsors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppCharge()
        _v8 = val1.location
        _x = _v8
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.power,) = _struct_d.unpack(str[start:end])
        self.constraints.repulsors.append(val1)
      _x = self
      start = end
      end += 32
      (_x.start.lat, _x.start.lon, _x.destination.lat, _x.destination.lon,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppLocation()
        _x = val1
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        self.path.points.append(val1)
      _x = self
      start = end
      end += 9
      (_x.algorith, _x.requirements.wpd,) = _struct_Bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_6d = struct.Struct("<6d")
_struct_d = struct.Struct("<d")
_struct_2d = struct.Struct("<2d")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
"""autogenerated by genpy from C31_PathPlanner/PathPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class PathPlanResponse(genpy.Message):
  _md5sum = "4cb53a3d10efe3f352d6ac9b1a895970"
  _type = "C31_PathPlanner/PathPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/ppWaypoints path


================================================================================
MSG: C31_PathPlanner/ppWaypoints
C31_PathPlanner/ppLocation[] points
================================================================================
MSG: C31_PathPlanner/ppLocation
float64 lat
float64 lon
"""
  __slots__ = ['path']
  _slot_types = ['C31_PathPlanner/ppWaypoints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = C31_PathPlanner.msg.ppWaypoints()
    else:
      self.path = C31_PathPlanner.msg.ppWaypoints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = C31_PathPlanner.msg.ppWaypoints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppLocation()
        _x = val1
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        self.path.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.lat, _x.lon))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = C31_PathPlanner.msg.ppWaypoints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.ppLocation()
        _x = val1
        start = end
        end += 16
        (_x.lat, _x.lon,) = _struct_2d.unpack(str[start:end])
        self.path.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
class PathPlan(object):
  _type          = 'C31_PathPlanner/PathPlan'
  _md5sum = '529cb38688d070f63410399477217988'
  _request_class  = PathPlanRequest
  _response_class = PathPlanResponse
