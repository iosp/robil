/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C31_PathPlanner/srv/PathPlan.srv */
#ifndef C31_PATHPLANNER_SERVICE_PATHPLAN_H
#define C31_PATHPLANNER_SERVICE_PATHPLAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C31_PathPlanner/ppMap.h"
#include "C31_PathPlanner/ppConstraints.h"
#include "C31_PathPlanner/ppLocation.h"
#include "C31_PathPlanner/ppLocation.h"
#include "C31_PathPlanner/ppWaypoints.h"
#include "C31_PathPlanner/ppRequirements.h"


#include "C31_PathPlanner/ppWaypoints.h"

namespace C31_PathPlanner
{
template <class ContainerAllocator>
struct PathPlanRequest_ {
  typedef PathPlanRequest_<ContainerAllocator> Type;

  PathPlanRequest_()
  : map()
  , constraints()
  , start()
  , destination()
  , path()
  , algorith(0)
  , requirements()
  {
  }

  PathPlanRequest_(const ContainerAllocator& _alloc)
  : map(_alloc)
  , constraints(_alloc)
  , start(_alloc)
  , destination(_alloc)
  , path(_alloc)
  , algorith(0)
  , requirements(_alloc)
  {
  }

  typedef  ::C31_PathPlanner::ppMap_<ContainerAllocator>  _map_type;
   ::C31_PathPlanner::ppMap_<ContainerAllocator>  map;

  typedef  ::C31_PathPlanner::ppConstraints_<ContainerAllocator>  _constraints_type;
   ::C31_PathPlanner::ppConstraints_<ContainerAllocator>  constraints;

  typedef  ::C31_PathPlanner::ppLocation_<ContainerAllocator>  _start_type;
   ::C31_PathPlanner::ppLocation_<ContainerAllocator>  start;

  typedef  ::C31_PathPlanner::ppLocation_<ContainerAllocator>  _destination_type;
   ::C31_PathPlanner::ppLocation_<ContainerAllocator>  destination;

  typedef  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator>  _path_type;
   ::C31_PathPlanner::ppWaypoints_<ContainerAllocator>  path;

  typedef uint8_t _algorith_type;
  uint8_t algorith;

  typedef  ::C31_PathPlanner::ppRequirements_<ContainerAllocator>  _requirements_type;
   ::C31_PathPlanner::ppRequirements_<ContainerAllocator>  requirements;


  typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PathPlanRequest
typedef  ::C31_PathPlanner::PathPlanRequest_<std::allocator<void> > PathPlanRequest;

typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanRequest> PathPlanRequestPtr;
typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanRequest const> PathPlanRequestConstPtr;


template <class ContainerAllocator>
struct PathPlanResponse_ {
  typedef PathPlanResponse_<ContainerAllocator> Type;

  PathPlanResponse_()
  : path()
  {
  }

  PathPlanResponse_(const ContainerAllocator& _alloc)
  : path(_alloc)
  {
  }

  typedef  ::C31_PathPlanner::ppWaypoints_<ContainerAllocator>  _path_type;
   ::C31_PathPlanner::ppWaypoints_<ContainerAllocator>  path;


  typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PathPlanResponse
typedef  ::C31_PathPlanner::PathPlanResponse_<std::allocator<void> > PathPlanResponse;

typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanResponse> PathPlanResponsePtr;
typedef boost::shared_ptr< ::C31_PathPlanner::PathPlanResponse const> PathPlanResponseConstPtr;

struct PathPlan
{

typedef PathPlanRequest Request;
typedef PathPlanResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PathPlan
} // namespace C31_PathPlanner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "73bccb884ec321962a21dc7c29df8109";
  }

  static const char* value(const  ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x73bccb884ec32196ULL;
  static const uint64_t static_value2 = 0x2a21dc7c29df8109ULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/PathPlanRequest";
  }

  static const char* value(const  ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppMap map\n\
C31_PathPlanner/ppConstraints constraints\n\
C31_PathPlanner/ppLocation start\n\
C31_PathPlanner/ppLocation destination\n\
C31_PathPlanner/ppWaypoints path\n\
uint8 algorith\n\
C31_PathPlanner/ppRequirements requirements\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppMap\n\
uint32 width \n\
uint32 height\n\
uint8[] data\n\
float64 resolution\n\
C31_PathPlanner/ppPosition offset\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppPosition\n\
C31_PathPlanner/ppLocation location\n\
float64 orientation\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppLocation\n\
float64 lat\n\
float64 lon\n\
================================================================================\n\
MSG: C31_PathPlanner/ppConstraints\n\
C31_PathPlanner/ppCorridor corridor\n\
C31_PathPlanner/ppRobotDimension robot\n\
C31_PathPlanner/ppCharge[] attractors\n\
C31_PathPlanner/ppCharge[] repulsors\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppCorridor\n\
float64 width\n\
================================================================================\n\
MSG: C31_PathPlanner/ppRobotDimension\n\
float64 size\n\
================================================================================\n\
MSG: C31_PathPlanner/ppCharge\n\
C31_PathPlanner/ppLocation location\n\
float64 power\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppWaypoints\n\
C31_PathPlanner/ppLocation[] points\n\
================================================================================\n\
MSG: C31_PathPlanner/ppRequirements\n\
float64 wpd\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4cb53a3d10efe3f352d6ac9b1a895970";
  }

  static const char* value(const  ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4cb53a3d10efe3f3ULL;
  static const uint64_t static_value2 = 0x52d6ac9b1a895970ULL;
};

template<class ContainerAllocator>
struct DataType< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/PathPlanResponse";
  }

  static const char* value(const  ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/ppWaypoints path\n\
\n\
\n\
================================================================================\n\
MSG: C31_PathPlanner/ppWaypoints\n\
C31_PathPlanner/ppLocation[] points\n\
================================================================================\n\
MSG: C31_PathPlanner/ppLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::PathPlanRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.map);
    stream.next(m.constraints);
    stream.next(m.start);
    stream.next(m.destination);
    stream.next(m.path);
    stream.next(m.algorith);
    stream.next(m.requirements);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PathPlanRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C31_PathPlanner::PathPlanResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PathPlanResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C31_PathPlanner::PathPlan> {
  static const char* value() 
  {
    return "529cb38688d070f63410399477217988";
  }

  static const char* value(const C31_PathPlanner::PathPlan&) { return value(); } 
};

template<>
struct DataType<C31_PathPlanner::PathPlan> {
  static const char* value() 
  {
    return "C31_PathPlanner/PathPlan";
  }

  static const char* value(const C31_PathPlanner::PathPlan&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "529cb38688d070f63410399477217988";
  }

  static const char* value(const C31_PathPlanner::PathPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C31_PathPlanner::PathPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/PathPlan";
  }

  static const char* value(const C31_PathPlanner::PathPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "529cb38688d070f63410399477217988";
  }

  static const char* value(const C31_PathPlanner::PathPlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C31_PathPlanner::PathPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C31_PathPlanner/PathPlan";
  }

  static const char* value(const C31_PathPlanner::PathPlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C31_PATHPLANNER_SERVICE_PATHPLAN_H

