/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pathplanning;

import com.sun.org.apache.xml.internal.resolver.Catalog;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.Inet4Address;
import java.nio.Buffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author dan
 */
public class MapBoard extends javax.swing.JFrame {

    /**
     * Creates new form MapBoard
     */
    public MapBoard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitter_map_control = new javax.swing.JSplitPane();
        pnlControlAndStatus = new javax.swing.JPanel();
        pnlControl = new javax.swing.JPanel();
        btnLoad = new javax.swing.JButton();
        btnCenter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        sldFrames = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        sldZoom = new javax.swing.JSlider();
        lblFrmeNum = new javax.swing.JLabel();
        btnConfig = new javax.swing.JButton();
        btnBlakList = new javax.swing.JButton();
        scrollStatus = new javax.swing.JScrollPane();
        status = new javax.swing.JTextArea();
        splitter_map_frame = new javax.swing.JSplitPane();
        pnlMap = new MapPanel(frames);
        jPanel1 = new javax.swing.JPanel();
        scrollFrame = new javax.swing.JScrollPane();
        txtFrame = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        chkXml = new javax.swing.JCheckBox();
        btnCopy = new javax.swing.JButton();
        btnCopy1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 600));

        splitter_map_control.setDividerLocation(450);
        splitter_map_control.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlControl.setMaximumSize(new java.awt.Dimension(25, 100));
        pnlControl.setMinimumSize(new java.awt.Dimension(25, 100));
        pnlControl.setPreferredSize(new java.awt.Dimension(0, 25));

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnCenter.setText("Center");
        btnCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCenterActionPerformed(evt);
            }
        });

        jLabel2.setText("Frame");

        sldFrames.setMajorTickSpacing(1);
        sldFrames.setMinorTickSpacing(1);
        sldFrames.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldFramesStateChanged(evt);
            }
        });

        jLabel1.setText("Zoom");

        sldZoom.setMajorTickSpacing(1);
        sldZoom.setMinimum(1);
        sldZoom.setMinorTickSpacing(1);
        sldZoom.setValue(10);
        sldZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldZoomStateChanged(evt);
            }
        });

        lblFrmeNum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFrmeNum.setText("0");

        btnConfig.setText("Reload Cognifuration");
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        btnBlakList.setText("BlackList");
        btnBlakList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlakListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
        pnlControl.setLayout(pnlControlLayout);
        pnlControlLayout.setHorizontalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(btnLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCenter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 517, Short.MAX_VALUE)
                        .addComponent(btnBlakList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfig))
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFrmeNum, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sldFrames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlControlLayout.setVerticalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(lblFrmeNum))
                    .addComponent(sldFrames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLoad)
                        .addComponent(btnCenter)
                        .addComponent(jLabel1))
                    .addComponent(sldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConfig)
                        .addComponent(btnBlakList)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        status.setEditable(false);
        status.setBackground(new java.awt.Color(238, 238, 238));
        status.setColumns(20);
        status.setRows(5);
        scrollStatus.setViewportView(status);

        javax.swing.GroupLayout pnlControlAndStatusLayout = new javax.swing.GroupLayout(pnlControlAndStatus);
        pnlControlAndStatus.setLayout(pnlControlAndStatusLayout);
        pnlControlAndStatusLayout.setHorizontalGroup(
            pnlControlAndStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollStatus)
            .addComponent(pnlControl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
        );
        pnlControlAndStatusLayout.setVerticalGroup(
            pnlControlAndStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlAndStatusLayout.createSequentialGroup()
                .addComponent(scrollStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addComponent(pnlControl, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        splitter_map_control.setRightComponent(pnlControlAndStatus);

        splitter_map_frame.setDividerLocation(800);

        pnlMap.setMinimumSize(new java.awt.Dimension(300, 300));
        pnlMap.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                pnlMapMouseWheelMoved(evt);
            }
        });
        pnlMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlMapMousePressed(evt);
            }
        });
        pnlMap.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlMapMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout pnlMapLayout = new javax.swing.GroupLayout(pnlMap);
        pnlMap.setLayout(pnlMapLayout);
        pnlMapLayout.setHorizontalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 799, Short.MAX_VALUE)
        );
        pnlMapLayout.setVerticalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 447, Short.MAX_VALUE)
        );

        splitter_map_frame.setLeftComponent(pnlMap);

        txtFrame.setEditable(false);
        txtFrame.setBackground(new java.awt.Color(238, 238, 238));
        txtFrame.setColumns(20);
        txtFrame.setRows(5);
        scrollFrame.setViewportView(txtFrame);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 23));
        jPanel2.setMinimumSize(new java.awt.Dimension(100, 23));

        chkXml.setSelected(true);
        chkXml.setText("XML");
        chkXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkXmlActionPerformed(evt);
            }
        });

        btnCopy.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        btnCopy.setText("copy");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        btnCopy1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        btnCopy1.setText("copy all");
        btnCopy1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopy1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(chkXml)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopy1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkXml)
                    .addComponent(btnCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCopy1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
        );

        splitter_map_frame.setRightComponent(jPanel1);

        splitter_map_control.setLeftComponent(splitter_map_frame);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitter_map_control)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitter_map_control)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    final JFileChooser fc = new JFileChooser();
    
    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        fc.setSelectedFile(new File(xmlname));
        int returnVal = fc.showOpenDialog(this);
        if( returnVal == JFileChooser.APPROVE_OPTION ){
            File fname = fc.getSelectedFile();
            loadXmlFile(fname.getAbsolutePath());
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void chkXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkXmlActionPerformed
        showFrame();
    }//GEN-LAST:event_chkXmlActionPerformed

    private void sldFramesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldFramesStateChanged
        lblFrmeNum.setText(""+sldFrames.getValue());
        showFrame();
    }//GEN-LAST:event_sldFramesStateChanged

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        txtFrame.copy();
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnCopy1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopy1ActionPerformed
        int cp = txtFrame.getCaretPosition();
        txtFrame.selectAll();
        txtFrame.copy();
        txtFrame.setCaretPosition(cp);
    }//GEN-LAST:event_btnCopy1ActionPerformed

    private void sldZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldZoomStateChanged
        Vec c = new Vec(pnlMap.getWidth(), pnlMap.getHeight()).zoom(0.5);
        view.zoom = sldZoom.getValue();
        showFrame();
    }//GEN-LAST:event_sldZoomStateChanged

    private void btnCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCenterActionPerformed
        Map map = frames.get(sldFrames.getValue()).map;
        view.offset = map.getLoc().add(map.getSize()).zoom(-0.5);
        showFrame();
    }//GEN-LAST:event_btnCenterActionPerformed

    java.awt.Point mousepress = null;
    
    private void pnlMapMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMapMouseDragged
        Vec p = new Vec(mousepress);
        Vec m = new Vec(evt.getPoint());
        Vec r = m.sub(p).zoom(1.0/view.zoom);
        mousepress = evt.getPoint();
        //System.out.println(""+m+", "+p+", "+r);
        view.offset = view.offset.add(r);
        showFrame();
    }//GEN-LAST:event_pnlMapMouseDragged

    private void pnlMapMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMapMousePressed
        mousepress = evt.getPoint();
    }//GEN-LAST:event_pnlMapMousePressed

    private void pnlMapMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_pnlMapMouseWheelMoved
        int c = evt.getWheelRotation();
        if(c==0) return;
        view.zoom = view.zoom + (c>0?1:-1)* sldZoom.getMinorTickSpacing();
        if(view.zoom < sldZoom.getMinimum()) view.zoom = sldZoom.getMinimum();
        if(view.zoom > sldZoom.getMaximum()) view.zoom = sldZoom.getMaximum(); 
        sldZoom.setValue((int) view.zoom);
    }//GEN-LAST:event_pnlMapMouseWheelMoved

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        fc.setSelectedFile(new File(configname));
        int returnVal = fc.showOpenDialog(this);
        if( returnVal == JFileChooser.APPROVE_OPTION ){
            File fname = fc.getSelectedFile();
            loadConfigFile(fname.getAbsolutePath());
        }
    }//GEN-LAST:event_btnConfigActionPerformed

    private void btnBlakListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlakListActionPerformed
        BLEditor ed = new BLEditor(this);
        ed.setVisible(true);
    }//GEN-LAST:event_btnBlakListActionPerformed

    public String blackList = "";
    boolean inBlackList(int id){
        if(blackList.trim().length()<1) return false;
        String[] lines=new String[0];
        if(blackList.contains("\n")){
            lines= blackList.split("\n");
        }else{
            lines=new String[]{blackList.trim()};
        }
        for(String line: lines){
            if(line.trim().length()<1) continue;
            String[] nums;
            if(line.contains(",")){
                nums= line.split(",");
            }
            else{
                nums= new String[]{line.trim()};
            }
            for(String n: nums){
                if(Integer.parseInt(n.trim())==id) return true;
            }
        }
        return false;
    }
    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MapBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MapBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MapBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MapBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MapBoard().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBlakList;
    private javax.swing.JButton btnCenter;
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCopy1;
    private javax.swing.JButton btnLoad;
    private javax.swing.JCheckBox chkXml;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblFrmeNum;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JPanel pnlControlAndStatus;
    private javax.swing.JPanel pnlMap;
    private javax.swing.JScrollPane scrollFrame;
    private javax.swing.JScrollPane scrollStatus;
    private javax.swing.JSlider sldFrames;
    private javax.swing.JSlider sldZoom;
    private javax.swing.JSplitPane splitter_map_control;
    private javax.swing.JSplitPane splitter_map_frame;
    private javax.swing.JTextArea status;
    private javax.swing.JTextArea txtFrame;
    // End of variables declaration//GEN-END:variables

    HashMap<String,Object> params  = new HashMap<String,Object>();
    String xmlname = "";
    String configname = "config.xml";
    ArrayList<Frame> frames = new ArrayList<Frame>();    
    Frame lastFrame(){ if(frames.size()==0) return null; return frames.get(frames.size()-1); }

    private void cleanFrames() {
       frames.clear();
    }

    private String shortText(String txt, int i) {
        if(txt.length()>i){
            int n = (int)((i-3)/2);
            String dots = "..."; //for (int q=0;q<2*n;q++) dots+=".";
            return txt.substring(0,n)+dots+txt.substring(txt.length()-n);
        }
        return txt;
    }

    public void showFrame() {
        if(frames==null || frames.size()==0) return;
        int findex = sldFrames.getValue();
        if(chkXml.isSelected()){
            txtFrame.setText(frames.get(findex).xml);
        }else{
            txtFrame.setText(frames.get(findex).toString());
        }
        txtFrame.setCaretPosition(0);
        MapPanel mp = (MapPanel) pnlMap;
        mp.setFrameIndex(findex);
        pnlMap.repaint();
    }

    public boolean loadConfigFile(String absolutePath) {
        boolean return_result = true;
        HashMap<String,Object> old_map = new HashMap<String,Object>(params);
        String old_name = configname;
        
        configname = absolutePath;
        StatusMessage("Start loading cofiguration from "+configname+" file.");
        try {
            File file = new File(configname);
            BufferedReader r = new BufferedReader(new FileReader(file));
            String line = null;
            String state = "NONE";
            while( (line = r.readLine())!=null ){
                String originalLine = line;
                line = line.trim();
                if(state.equals("NONE")){
                    if(line.startsWith("<config>")){
                        state = "CONFIG";
                        continue;
                    }
                    continue;
                }
                if(state.equals("CONFIG")){
                    if(line.startsWith("</config>")){
                        state = "NONE";
                        continue;
                    }
                    if(line.startsWith("<var ")){
                        state="CONFIG:VAR";
                        String name = getParam("name",line);
                        String value = getParam("value",line);
                        String type = getParam("type",line);
                        Object obj = createObject(type,value);
                        params.put(name, obj);
                        StatusMessage("param: "+name+"="+obj.toString());
                        if(line.endsWith("/>")){
                            state = "CONFIG";
                        }
                        continue;
                    }
                    continue;
                }
                if(state.equals("CONFIG:VAR")){
                    if(line.startsWith("</var>")){
                        state = "CONFIG";
                        continue;
                    }
                    continue;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(MapBoard.class.getName()).log(Level.SEVERE, null, ex);
            StatusMessage("EXCEPTION: problem during CONFIG file loading.");
            configname = old_name;
            params = old_map;
            return_result = false;
        }
        StatusMessage("Configuration loaded.");
        showFrame();
        return return_result;
    }

    boolean contains(String[] n, String s){
        for(String ss: n) if(ss.contains(s)) return true;
        return false;
    }
    private Object createObject(String type, String value) {
        if(type.startsWith("int")){ return new Integer(Integer.parseInt(value)); }
        if(type.startsWith("double")){ return new Double(Double.parseDouble(value)); }
        if(type.startsWith("color")){ 
            if(value.contains(",")){
                String[] n = value.split(",");
                if(n.length==2){ return new Color(Integer.parseInt(n[0]),n[1].equals("true")); }
                if(n.length==3 && contains(n,".")){
                    float[] t = new float[n.length];
                    for(int i=0;i<t.length;i++) t[i] = Float.parseFloat(n[i]);
                    return new Color(t[0],t[1],t[2]);
                }
                if(n.length==3 && contains(n,".")==false){
                    int[] t = new int[n.length];
                    for(int i=0;i<t.length;i++) t[i] = Integer.parseInt(n[i]);
                    return new Color(t[0],t[1],t[2]);
                }
                if(n.length==4 && contains(n,".")){
                    float[] t = new float[n.length];
                    for(int i=0;i<t.length;i++) t[i] = Float.parseFloat(n[i]);
                    return new Color(t[0],t[1],t[2],t[3]);
                }
                if(n.length==4 && contains(n,".")==false){
                    int[] t = new int[n.length];
                    for(int i=0;i<t.length;i++) t[i] = Integer.parseInt(n[i]);
                    return new Color(t[0],t[1],t[2],t[3]);
                }
            }else{
                return new Color(Integer.parseInt(value));
            }
        }
        if(type.startsWith("s")){ return value; }
        return null;
    }
    
    class View{
        Dimension panelSize=null;
        Vec offset=new Vec(0,0);
        double zoom = 10;
        Vec transform(Vec p){ return p.add(offset).scale(zoom, zoom).add(new Vec(panelSize.width, panelSize.height).zoom(0.5)); }
    }
    
    public View view = new View();
    
    public class Map{
        int id=0;
        public int[] data = null;
        public int h=0;
        public int w=0;
        public int i=0;
        public String toString(){
            String r = "Map{"+w+","+h+": ";
            for(int x: data){
                r+=x+" ";
            }
            r+="}";
            return r;
        }
        
        public void paint(Graphics2D g, View view){
            if(data==null || data.length==0 || inBlackList(id)) return;
            Color _c = g.getColor();
            Stroke _s = g.getStroke();
            
            Color cObst = (Color)params.get("MAP_COLOR_OBST");
            Color cFree = (Color)params.get("MAP_COLOR_FREE");
            Color cUnkn = (Color)params.get("MAP_COLOR_UNKN");
            Color c = (Color)params.get("MAP_COLOR");
            g.setStroke(new BasicStroke(Math.max(1, (int)((double)(Double)params.get("MAP_STROKE")))));
            for(int y=0;y<h;y++){
                for(int x=0;x<w;x++){
                    Vec p1 = view.transform(new Vec(x-0.5, y-0.5));
                    Vec p2 = view.transform(new Vec(x-0.5, y+0.5));
                    Vec p3 = view.transform(new Vec(x+0.5, y+0.5));
                    Vec p4 = view.transform(new Vec(x+0.5, y-0.5));
                    if(data[y*w+x]==0) g.setColor(cFree);
                    if(data[y*w+x]==255) g.setColor(cObst);
                    if(data[y*w+x]==100) g.setColor(cUnkn);
                    if( p1.sub(p2).getLength() < 2){
                        Vec p = view.transform(new Vec(x,y));
                        g.drawLine(p.Int().x, p.Int().y, p.Int().x, p.Int().y);
                    }else{
                        int[] xx = new int[]{p1.Int().x, p2.Int().x, p3.Int().x, p4.Int().x};
                        int[] yy = new int[]{p1.Int().y, p2.Int().y, p3.Int().y, p4.Int().y};
                        g.fillPolygon(xx, yy, 4);
                        g.setColor(c);
                        g.drawPolygon(xx, yy, 4);                       
                    }
                }
            }
            
            g.setColor(_c);
            g.setStroke(_s);
        }

        private Vec getLoc() {
            return new Vec(0,0);
        }
        private Vec getSize() {
            return new Vec(w,h);
        }
    }
    public class Alt{
        int id = 0;
        public double[] data = null;
        String type = "";
        public int h=0;
        public int w=0;
        public int i=0;
        public String toString(){
            String r = "Alt-"+type+"{"+w+","+h+": ";
            for(double x: data){
                r+=x+" ";
            }
            r+="}";
            return r;
        }
        public void paint(Graphics2D g, View view){
            if(data==null || data.length==0 || inBlackList(id)) return;
            double minv = Double.MAX_VALUE;
            double maxv = Double.MIN_VALUE;
            for(double v: data){
                if( v<minv ) minv=v;
                if( v>maxv ) maxv=v;
            }
            Color _c = g.getColor();
            Stroke _s = g.getStroke();
            
            //g.setColor((Color)params.get("MAP_COLOR"));
            //g.setStroke(new BasicStroke(Math.max(1, (int)((double)(Double)params.get("MAP_STROKE")))));
            for(int y=0;y<h;y++){
                for(int x=0;x<w;x++){
                    double value = (data[y*w+x]+minv) / (minv+maxv);
                    Vec p1 = view.transform(new Vec(x-0.5, y-0.5));
                    Vec p2 = view.transform(new Vec(x-0.5, y+0.5));
                    Vec p3 = view.transform(new Vec(x+0.5, y+0.5));
                    Vec p4 = view.transform(new Vec(x+0.5, y-0.5));
                    g.setColor(new Color((float)(1.0-value), (float)0.0,(float)value));
                    if( p1.sub(p2).getLength() < 2){
                        Vec p = view.transform(new Vec(x,y));
                        g.drawLine(p.Int().x, p.Int().y, p.Int().x, p.Int().y);
                    }else{
                        int[] xx = new int[]{p1.Int().x, p2.Int().x, p3.Int().x, p4.Int().x};
                        int[] yy = new int[]{p1.Int().y, p2.Int().y, p3.Int().y, p4.Int().y};
                        g.fillPolygon(xx, yy, 4);                       
                    }
                }
            }
            
            g.setColor(_c);
            g.setStroke(_s);
        }
    }
    public class Point{
        int id=0;
        double x =0;
        double y =0;
        public String toString(){ return "("+x+","+y+")"; }
        public void paint(Graphics2D g, View view){

        }
    }
    public class LabelPoint{
        int id=0;
        Point p=null;
        String type="";
        
        public String toString(){ return "Point-"+type+"{ "+p.toString()+" }"; }
        
        public void paint(Graphics2D g, View view){
            if(inBlackList(id)) return;
            if(p!=null){
                Color _c = g.getColor();
                Stroke _s = g.getStroke();
                
                g.setColor((Color)params.get("POINT_COLOR_"+type));
                g.setStroke(new BasicStroke(Math.max(1, (int)((Double)params.get("POINT_STROKE_"+type)*view.zoom))));
                
                Vec vs = new Vec(p.x, p.y);
                vs = view.transform(vs);
                g.drawOval(vs.Int().x-2, vs.Int().y-2,  4, 4);
                                
                g.setColor(_c);
                g.setStroke(_s);
            }
        }
    }
    public class Path{
        int id=0;
        String type = "";
        ArrayList<Point> points = new ArrayList<Point>();
        public String toString(){ 
            String r = "Path-"+type+"{ ";
            for(Point p: points){
                r+=p.toString()+" ";
            }
            return r+"}";
        }
        public Point lastPoint(){
            if(points.size()==0) return null;
            return points.get(points.size()-1);
        }
        public void paint(Graphics2D g, View view){
            if(inBlackList(id)) return;
            
            if(points.size()>0){
                Color _c = g.getColor();
                Stroke _s = g.getStroke();
                
                g.setColor((Color)params.get("PATH_COLOR_"+type));
                g.setStroke(new BasicStroke(Math.max(1, (int)((Double)params.get("PATH_STROKE_"+type)*view.zoom))));
                Point s = points.get(0);
                for(Point p: points){
                    if(s==p) continue;
                    Vec vs = new Vec(s.x, s.y);
                    Vec vp = new Vec(p.x, p.y);
                    vs = view.transform(vs);
                    vp = view.transform(vp);
                    g.drawLine(vs.Int().x, vs.Int().y,  vp.Int().x, vp.Int().y);
                    g.drawOval(vs.Int().x-2, vs.Int().y-2,  4, 4);
                    s=p;
                }
                
                g.setColor(_c);
                g.setStroke(_s);
            }
        }
    }
    public class Frame{
        public String xml = "";
        public int id=0;
        Map map = null;
        ArrayList<Path> pathes = new ArrayList<Path>();
        ArrayList<Alt> alts = new ArrayList<Alt>();
        ArrayList<LabelPoint> points = new ArrayList<LabelPoint>();
        private boolean corrupted = false;
        public String toString(){
            String r = "Frame #"+id+"{\n";
            r+=map.toString();
            for(Path p: pathes){
                r+="\n";
                r+=p.toString();
            }
            for(Alt p: alts){
                r+="\n";
                r+=p.toString();
            }
            r+="\n}";
            return r;
        }
        public Path lastPath(){ if(pathes.size()==0) return null;
            return pathes.get(pathes.size()-1);
        }
        public Alt lastAlt(){ if(alts.size()==0) return null;
            return alts.get(alts.size()-1);
        }
        public LabelPoint lastPoint(){ if(points.size()==0) return null;
            return points.get(points.size()-1);
        }

        public void setCorrupted() {
            corrupted = true;
        }
        public boolean isCorrupted(){ return corrupted; }

        void paint(Graphics2D g, Dimension size) {
            if( isCorrupted() ){
                g.setColor(Color.red);
                g.setStroke(new BasicStroke(4));
                g.drawLine(0,0, size.width, size.height);
                g.drawLine(size.width,0, 0, size.height);
                return;
            }
            view.panelSize = size;
            if(map!=null) map.paint(g, view);
            if(alts.size()>0){
                for(Alt a: alts) a.paint(g, view);
            }
            if(pathes.size()>0){
                for(Path p: pathes) p.paint(g, view);
            }
            if(points.size()>0){
                for(LabelPoint p: points) p.paint(g, view);
            }

        }
     }
    
    
    String rmv(String v){
        return v.substring(1,v.length()-1);
    }
    String getParam(String tag, String line){
        line = rmv(line).trim();
        String[] l = line.split(" ");
        for(String x : l){
            x = x.trim();
            if(x.startsWith(tag)) { return rmv(x.split("=")[1]); }
        }
        return null;
    }
    
    void loadXmlFile(String tmpoutxml) {
        ArrayList<Frame> old_frames = new ArrayList<Frame>(frames);
        String old_xmlString = xmlname;
        
        cleanFrames();
        xmlname = tmpoutxml;
        StatusMessage("Start loading frames from "+xmlname+" file.");
        try {
            File file = new File(xmlname);
            BufferedReader r = new BufferedReader(new FileReader(file));
            String line = null;
            String state = "NONE";
            Frame frame = null;
            Alt alt = null;
            while( (line = r.readLine())!=null ){
                String originalLine = line;
                line = line.trim();
                if(state.equals("NONE")){
                    if(line.startsWith("<frame ")){
                        state = "FRAME";
                        frame = new Frame();
                        frame.id = Integer.parseInt(getParam("id",line));
                        frame.xml+=originalLine;
                        continue;
                    }
                    continue;
                }
                if(state.startsWith("FRAME") && frame!=null){
                    frame.xml+=(frame.xml.length()==0?"":"\n")+originalLine;
                }
                if(state.equals("FRAME")){
                    if(line.startsWith("</frame>")){
                        state = "NONE";
                        frames.add(frame);
                        frame = null;
                        continue;
                    }
                    if(line.startsWith("<map ")){
                        state="FRAME:MAP";
                        frame.map = new Map();
                        frame.map.h = Integer.parseInt(getParam("h",line));
                        frame.map.w = Integer.parseInt(getParam("w",line));
                        frame.map.data = new int[frame.map.w*frame.map.h];
                        frame.map.i=0;
                        frame.map.id = Integer.parseInt(getParam("id",line));
                        continue;
                    }
                    if(line.startsWith("<alt ")){
                        state="FRAME:ALT";
                        alt = new Alt();
                        frame.alts.add(alt);
                        alt.h = Integer.parseInt(getParam("h",line));
                        alt.w = Integer.parseInt(getParam("w",line));
                        alt.data = new double[alt.w*alt.h];
                        alt.i=0;
                        alt.type = getParam("type",line);
                        alt.id = Integer.parseInt(getParam("id",line));
                        continue;
                    }
                    if(line.startsWith("<path ")){
                        state="FRAME:PATH";
                        frame.pathes.add(new Path());
                        frame.lastPath().type = getParam("type", line);
                        frame.lastPath().id = Integer.parseInt(getParam("id",line));
                        continue;
                    }
                    if(line.startsWith("<point ")){
                        state="FRAME:POINT";
                        frame.points.add(new LabelPoint());
                        frame.lastPoint().type = getParam("type", line);
                        frame.lastPoint().p = new Point();
                        frame.lastPoint().id = Integer.parseInt(getParam("id",line));
                        continue;
                    }

                    continue;
                }
                if(state.equals("FRAME:MAP")){
                    if(line.startsWith("</map>")){
                        state = "FRAME";
                        continue;
                    }
                    if(line.length()>0){
                        String[] l = line.split(",");
                        try{
                            for(String x: l){
                                x = x.trim();
                                if(x.length()>0) frame.map.data[frame.map.i++]=Integer.parseInt(x);
                            }
                        }catch(Exception e){}
                    }
                    continue;
                }
                if(state.equals("FRAME:ALT")){
                    if(line.startsWith("</alt>")){
                        state = "FRAME";
                        continue;
                    }
                    if(line.length()>0){
                        String[] l = line.split(",");
                        try{
                            for(String x: l){
                                x = x.trim();
                                if(x.length()>0) alt.data[alt.i++]=Double.parseDouble(x);
                            }
                        }catch(Exception e){}
                    }
                    continue;
                }
                if(state.equals("FRAME:PATH")){
                    if(line.startsWith("</path>")){
                        state = "FRAME";
                        continue;
                    }
                    if(line.startsWith("<point ")){
                        state="FRAME:PATH:POINT";
                        frame.lastPath().points.add(new Point());
                        frame.lastPath().lastPoint().id = Integer.parseInt(getParam("id",line));
                        continue;
                    }
                    continue;
                }
                if(state.equals("FRAME:PATH:POINT")){
                    if(line.startsWith("</point>")){
                        state = "FRAME:PATH";
                        continue;
                    }
                    if(line.length()>0){
                        String[] n = line.split(",");
                        //Point p = frame.pathes.get(frame.pathes.size()-1).points.get(frame.pathes.get(frame.pathes.size()-1).points.size()-1);
                        Point p = frame.lastPath().lastPoint();
                        p.x = Double.parseDouble(n[0]);
                        p.y = Double.parseDouble(n[1]);
                        continue;
                    }
                    continue;
                }
                if(state.equals("FRAME:POINT")){
                    if(line.startsWith("</point>")){
                        state = "FRAME";
                        continue;
                    }
                    if(line.length()>0){
                        String[] n = line.split(",");
                        LabelPoint p = frame.lastPoint();
                        p.p.x = Double.parseDouble(n[0]);
                        p.p.y = Double.parseDouble(n[1]);
                        continue;
                    }
                    continue;
                }
            }
            if(frame!=null){
                Frame f = lastFrame();
                if( f != null ){ f.setCorrupted(); }
            }
        } catch (Exception ex) {
            Logger.getLogger(MapBoard.class.getName()).log(Level.SEVERE, null, ex);
            StatusMessage("EXCEPTION: problem during XML file loading. "+ex.getMessage());
            xmlname = old_xmlString;
            frames.clear();
            frames.addAll(old_frames);
        }
        
        StatusMessage("Loaded "+frames.size()+" frames");
        this.setTitle(shortText(xmlname,20));
        sldFrames.setMaximum(frames.size()-1);
        sldFrames.setMinimum(0);
        sldFrames.setValue(0);
        showFrame();
        
        for(Frame f: frames){
            StatusMessage("Frame = "+f.id);
            System.out.println("F: "+f.toString());
        }
    }
    
    public void StatusMessage(String msg){
        System.out.println("STATUS: "+msg);
        status.setText((status.getText().length()>0?status.getText()+"\n":"")+msg);
        status.setCaretPosition(status.getText().length());
    }
}
