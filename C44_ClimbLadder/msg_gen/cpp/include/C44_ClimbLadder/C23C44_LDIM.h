/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C44_ClimbLadder/msg/C23C44_LDIM.msg */
#ifndef C44_CLIMBLADDER_MESSAGE_C23C44_LDIM_H
#define C44_CLIMBLADDER_MESSAGE_C23C44_LDIM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C44_ClimbLadder
{
template <class ContainerAllocator>
struct C23C44_LDIM_ {
  typedef C23C44_LDIM_<ContainerAllocator> Type;

  C23C44_LDIM_()
  : ladder_dimensions()
  {
  }

  C23C44_LDIM_(const ContainerAllocator& _alloc)
  : ladder_dimensions(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ladder_dimensions_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  ladder_dimensions;


  typedef boost::shared_ptr< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C23C44_LDIM
typedef  ::C44_ClimbLadder::C23C44_LDIM_<std::allocator<void> > C23C44_LDIM;

typedef boost::shared_ptr< ::C44_ClimbLadder::C23C44_LDIM> C23C44_LDIMPtr;
typedef boost::shared_ptr< ::C44_ClimbLadder::C23C44_LDIM const> C23C44_LDIMConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C44_ClimbLadder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ba8c4f2a2a20475cf4d20206fa52bd50";
  }

  static const char* value(const  ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xba8c4f2a2a20475cULL;
  static const uint64_t static_value2 = 0xf4d20206fa52bd50ULL;
};

template<class ContainerAllocator>
struct DataType< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C44_ClimbLadder/C23C44_LDIM";
  }

  static const char* value(const  ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] ladder_dimensions\n\
\n\
";
  }

  static const char* value(const  ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ladder_dimensions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C23C44_LDIM_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C44_ClimbLadder::C23C44_LDIM_<ContainerAllocator> & v) 
  {
    s << indent << "ladder_dimensions[]" << std::endl;
    for (size_t i = 0; i < v.ladder_dimensions.size(); ++i)
    {
      s << indent << "  ladder_dimensions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ladder_dimensions[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C44_CLIMBLADDER_MESSAGE_C23C44_LDIM_H

