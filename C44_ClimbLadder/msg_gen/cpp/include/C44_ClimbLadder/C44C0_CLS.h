/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C44_ClimbLadder/msg/C44C0_CLS.msg */
#ifndef C44_CLIMBLADDER_MESSAGE_C44C0_CLS_H
#define C44_CLIMBLADDER_MESSAGE_C44C0_CLS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C44_ClimbLadder
{
template <class ContainerAllocator>
struct C44C0_CLS_ {
  typedef C44C0_CLS_<ContainerAllocator> Type;

  C44C0_CLS_()
  : climb_a_ladder_success(false)
  {
  }

  C44C0_CLS_(const ContainerAllocator& _alloc)
  : climb_a_ladder_success(false)
  {
  }

  typedef uint8_t _climb_a_ladder_success_type;
  uint8_t climb_a_ladder_success;


  typedef boost::shared_ptr< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C44C0_CLS
typedef  ::C44_ClimbLadder::C44C0_CLS_<std::allocator<void> > C44C0_CLS;

typedef boost::shared_ptr< ::C44_ClimbLadder::C44C0_CLS> C44C0_CLSPtr;
typedef boost::shared_ptr< ::C44_ClimbLadder::C44C0_CLS const> C44C0_CLSConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C44_ClimbLadder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "77d0b3fede04687d0247511e6ddd0ab1";
  }

  static const char* value(const  ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x77d0b3fede04687dULL;
  static const uint64_t static_value2 = 0x0247511e6ddd0ab1ULL;
};

template<class ContainerAllocator>
struct DataType< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C44_ClimbLadder/C44C0_CLS";
  }

  static const char* value(const  ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool climb_a_ladder_success\n\
\n\
";
  }

  static const char* value(const  ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.climb_a_ladder_success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C44C0_CLS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C44_ClimbLadder::C44C0_CLS_<ContainerAllocator> & v) 
  {
    s << indent << "climb_a_ladder_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.climb_a_ladder_success);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C44_CLIMBLADDER_MESSAGE_C44C0_CLS_H

