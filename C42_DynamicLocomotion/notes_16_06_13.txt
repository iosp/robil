Updates:
Rotate / Translate nodes added to the WalkerNode family

USING WALKER:

Robot waits to start task, then goes to the foot_placement_path server to get FP path, walks according to FP points and orientation.

To run Walker:

 *A - Continuous Dynamic mode (BDI):

    1. run node:
       $ rosrun C42_DynamicLocomotion WalkerNode.py CD

    2. run task using C0 task_tester:
       $ rosrun C0_RobilTask task_tester WalkerNode_Continuous

    3. run C31_clone to emulate the C31PathPlanner (publish a path message): 
       $ rosrun C42_DynamicLocomotion scripts/C31_Clone.py 


 *B - Discrete Foot Placement (DD and QS):
     Discrete Dynamic (DD) FP mode (with degradation to Discrete Quasi-Static mode) OR Discrete Quasi-Static (QS) FP mode.

    1. run node:
       $ rosrun C42_DynamicLocomotion WalkerNode.py DD
    OR
       $ rosrun C42_DynamicLocomotion WalkerNode.py QS

    2. run FootPlacement_Service.srv to emulate the foot_placement_path server (returns a FP path message): 
       $ rosrun C42_DynamicLocomotion Clone_FootPlacement_Server.py

    3. run task using C0 task_tester:
       $ rosrun C0_RobilTask task_tester WalkerNode_Discrete


 C - rotation and translation:

    0. Needs to run COM calculation (C43_LocalBodyCOM):
       $ rosrun C43_LocalBodyCOM computeCOM
       and needs to run C42_State node
       $ rosrun C42_State state

    1. run node:
       $ rosrun C42_DynamicLocomotion WalkerNode.py <Trans or Rot> # for translation or rotation

    2. run task using C0 task_tester:
      For Translation:
       $ rosrun C0_RobilTask task_tester WalkerNode_Translation args="Translate_X=1.0,Translate_Y=0.0"
       Translate_X and Translate_Y are optional, defaulting to 0.0 in locla frame coordiantes
      For Rotation:
       $ rosrun C0_RobilTask task_tester WalkerNode_Rotation args="Rotate=-1"
        Rotate is in rads, counter-clockwise

 C_ - Aline Pose (AP) rotation and translation:

    1. run node:
       $ rosrun C42_DynamicLocomotion WalkerNode.py AP

    2. run C23_orient.srv to emulate the C23_orient server (returns target translation and rotation): 
       $ rosrun C42_DynamicLocomotion Clone_C23_orient.py

    3. run task using C0 task_tester:
       $ rosrun C0_RobilTask task_tester WalkerNode_AP args="Object=Firehose"
     OR (operates without service)
       $ rosrun C0_RobilTask task_tester WalkerNode_AP args=turn_in_place_Yaw=0.8,Xmovement=0.3,Ymovement=0.3

 *D - Walking On Four (DW)

    0. Needs to run C42_State node
       $ rosrun C42_State state

    1. Needs to run COM calculation (C43_LocalBodyCOM):
       $ rosrun C43_LocalBodyCOM computeCOM

    2. run node:
       $ rosrun C42_DynamicLocomotion WalkerNode.py DW
    
    3. run task using C0 task_tester:
       $ rosrun C0_RobilTask task_tester WalkerNode_DW args="Terrain=MUD"                   # or HILLS>

    4. run C31_clone to emulate the C31PathPlanner (publish a path message): 
       $ rosrun C42_DynamicLocomotion scripts/C31_Clone_VRC2_Mud_Pit.py

 E - Stand Up from On Four (DW Stand Up)

    1. Needs to run COM calculation (C43_LocalBodyCOM):
       $ rosrun C43_LocalBodyCOM computeCOM

    2. run node:
       $ rosrun C42_Dynamic locomotion DWStandUp.py
    
    3. run task using C0 task_tester:
       $ rosrun C0_RobilTask task_tester DWStand

 *E_ - Turn On Four (DW Turn)

    1. Needs to run COM calculation (C43_LocalBodyCOM):
       $ rosrun C43_LocalBodyCOM computeCOM

    2. run node:
       $ rosrun C42_Dynamic locomotion DWturn.py
    
    3. run task using C0 task_tester:
       $ rosrun C0_RobilTask task_tester DWTurn args=Bearing=<desired yaw (global)>,Terrain=<MUD or HILLS>

* NEEDS C25_GlobalPosition, can use with cheats clone C25_GlobalPosition copy of ground_truth_odom:
   $ rosrun C42_DynamicLocomotion C25_GlobalPosition_Clone.py

** reset robot at initial position (use with cheat):
   $ rosrun C42_DynamicLocomotion scripts/Reset_start_pose.py
