/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C42_LocomotionAndStability/msg/C34C42_PSU.msg */
#ifndef C42_LOCOMOTIONANDSTABILITY_MESSAGE_C34C42_PSU_H
#define C42_LOCOMOTIONANDSTABILITY_MESSAGE_C34C42_PSU_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C42_LocomotionAndStability
{
template <class ContainerAllocator>
struct C34C42_PSU_ {
  typedef C34C42_PSU_<ContainerAllocator> Type;

  C34C42_PSU_()
  : PSU_DVEL()
  , PSU_VP_POS()
  , PSU_VP_OR()
  , PSU_VP_TOL()
  {
  }

  C34C42_PSU_(const ContainerAllocator& _alloc)
  : PSU_DVEL(_alloc)
  , PSU_VP_POS(_alloc)
  , PSU_VP_OR(_alloc)
  , PSU_VP_TOL(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PSU_DVEL_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PSU_DVEL;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PSU_VP_POS_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PSU_VP_POS;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PSU_VP_OR_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PSU_VP_OR;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PSU_VP_TOL_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PSU_VP_TOL;


  typedef boost::shared_ptr< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C34C42_PSU
typedef  ::C42_LocomotionAndStability::C34C42_PSU_<std::allocator<void> > C34C42_PSU;

typedef boost::shared_ptr< ::C42_LocomotionAndStability::C34C42_PSU> C34C42_PSUPtr;
typedef boost::shared_ptr< ::C42_LocomotionAndStability::C34C42_PSU const> C34C42_PSUConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C42_LocomotionAndStability

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f55fbce5db6d80be1a3e44223e3f3fa5";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf55fbce5db6d80beULL;
  static const uint64_t static_value2 = 0x1a3e44223e3f3fa5ULL;
};

template<class ContainerAllocator>
struct DataType< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C34C42_PSU";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] PSU_DVEL\n\
float32[] PSU_VP_POS\n\
float32[] PSU_VP_OR\n\
float32[] PSU_VP_TOL\n\
\n\
";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PSU_DVEL);
    stream.next(m.PSU_VP_POS);
    stream.next(m.PSU_VP_OR);
    stream.next(m.PSU_VP_TOL);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C34C42_PSU_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator> & v) 
  {
    s << indent << "PSU_DVEL[]" << std::endl;
    for (size_t i = 0; i < v.PSU_DVEL.size(); ++i)
    {
      s << indent << "  PSU_DVEL[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PSU_DVEL[i]);
    }
    s << indent << "PSU_VP_POS[]" << std::endl;
    for (size_t i = 0; i < v.PSU_VP_POS.size(); ++i)
    {
      s << indent << "  PSU_VP_POS[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PSU_VP_POS[i]);
    }
    s << indent << "PSU_VP_OR[]" << std::endl;
    for (size_t i = 0; i < v.PSU_VP_OR.size(); ++i)
    {
      s << indent << "  PSU_VP_OR[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PSU_VP_OR[i]);
    }
    s << indent << "PSU_VP_TOL[]" << std::endl;
    for (size_t i = 0; i < v.PSU_VP_TOL.size(); ++i)
    {
      s << indent << "  PSU_VP_TOL[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PSU_VP_TOL[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C42_LOCOMOTIONANDSTABILITY_MESSAGE_C34C42_PSU_H

