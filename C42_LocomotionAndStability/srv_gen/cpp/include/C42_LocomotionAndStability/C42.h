/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C42_LocomotionAndStability/srv/C42.srv */
#ifndef C42_LOCOMOTIONANDSTABILITY_SERVICE_C42_H
#define C42_LOCOMOTIONANDSTABILITY_SERVICE_C42_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C42_LocomotionAndStability/C34C42_WM.h"
#include "C42_LocomotionAndStability/C34C42_PSU.h"


#include "C42_LocomotionAndStability/C42C34_CS.h"
#include "C42_LocomotionAndStability/C42C34_EVE.h"

namespace C42_LocomotionAndStability
{
template <class ContainerAllocator>
struct C42Request_ {
  typedef C42Request_<ContainerAllocator> Type;

  C42Request_()
  : Work_mode_msg()
  , Desired_Path_state_update_msg()
  {
  }

  C42Request_(const ContainerAllocator& _alloc)
  : Work_mode_msg(_alloc)
  , Desired_Path_state_update_msg(_alloc)
  {
  }

  typedef  ::C42_LocomotionAndStability::C34C42_WM_<ContainerAllocator>  _Work_mode_msg_type;
   ::C42_LocomotionAndStability::C34C42_WM_<ContainerAllocator>  Work_mode_msg;

  typedef  ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator>  _Desired_Path_state_update_msg_type;
   ::C42_LocomotionAndStability::C34C42_PSU_<ContainerAllocator>  Desired_Path_state_update_msg;


  typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C42Request
typedef  ::C42_LocomotionAndStability::C42Request_<std::allocator<void> > C42Request;

typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Request> C42RequestPtr;
typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Request const> C42RequestConstPtr;


template <class ContainerAllocator>
struct C42Response_ {
  typedef C42Response_<ContainerAllocator> Type;

  C42Response_()
  : Current_work_mode_msg()
  , Events_msg()
  {
  }

  C42Response_(const ContainerAllocator& _alloc)
  : Current_work_mode_msg(_alloc)
  , Events_msg(_alloc)
  {
  }

  typedef  ::C42_LocomotionAndStability::C42C34_CS_<ContainerAllocator>  _Current_work_mode_msg_type;
   ::C42_LocomotionAndStability::C42C34_CS_<ContainerAllocator>  Current_work_mode_msg;

  typedef  ::C42_LocomotionAndStability::C42C34_EVE_<ContainerAllocator>  _Events_msg_type;
   ::C42_LocomotionAndStability::C42C34_EVE_<ContainerAllocator>  Events_msg;


  typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C42Response
typedef  ::C42_LocomotionAndStability::C42Response_<std::allocator<void> > C42Response;

typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Response> C42ResponsePtr;
typedef boost::shared_ptr< ::C42_LocomotionAndStability::C42Response const> C42ResponseConstPtr;

struct C42
{

typedef C42Request Request;
typedef C42Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C42
} // namespace C42_LocomotionAndStability

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "06ee50e9645cd17f433bd1517f03b870";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x06ee50e9645cd17fULL;
  static const uint64_t static_value2 = 0x433bd1517f03b870ULL;
};

template<class ContainerAllocator>
struct DataType< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C42Request";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C34C42_WM Work_mode_msg\n\
C42_LocomotionAndStability/C34C42_PSU Desired_Path_state_update_msg\n\
\n\
================================================================================\n\
MSG: C42_LocomotionAndStability/C34C42_WM\n\
int32 Work_mode\n\
int32 Stand_in_place=1\n\
int32 Dynamic_bipedal_walk=2\n\
int32 Quasi_Static_bipedal_walk=3\n\
int32 Crawl=4\n\
int32 Turn_in_place=5\n\
int32 Single_step=6\n\
int32 Brace_for_imact=7\n\
int32 Stand_up=8\n\
\n\
\n\
================================================================================\n\
MSG: C42_LocomotionAndStability/C34C42_PSU\n\
float32[] PSU_DVEL\n\
float32[] PSU_VP_POS\n\
float32[] PSU_VP_OR\n\
float32[] PSU_VP_TOL\n\
\n\
";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0356ab6864acfe03fd83378b62c85831";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0356ab6864acfe03ULL;
  static const uint64_t static_value2 = 0xfd83378b62c85831ULL;
};

template<class ContainerAllocator>
struct DataType< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C42Response";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C42C34_CS Current_work_mode_msg\n\
C42_LocomotionAndStability/C42C34_EVE Events_msg\n\
\n\
\n\
================================================================================\n\
MSG: C42_LocomotionAndStability/C42C34_CS\n\
int32 Current_Work_mode\n\
\n\
================================================================================\n\
MSG: C42_LocomotionAndStability/C42C34_EVE\n\
int32 Events\n\
int32 Finished_task=1\n\
int32 Robot_fell=2\n\
int32 Performance_degradation=3\n\
\n\
";
  }

  static const char* value(const  ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C42_LocomotionAndStability::C42Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Work_mode_msg);
    stream.next(m.Desired_Path_state_update_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C42Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C42_LocomotionAndStability::C42Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Current_work_mode_msg);
    stream.next(m.Events_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C42Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C42_LocomotionAndStability::C42> {
  static const char* value() 
  {
    return "664024711124fd2c3ff9c16f9ecfc093";
  }

  static const char* value(const C42_LocomotionAndStability::C42&) { return value(); } 
};

template<>
struct DataType<C42_LocomotionAndStability::C42> {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C42";
  }

  static const char* value(const C42_LocomotionAndStability::C42&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C42_LocomotionAndStability::C42Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "664024711124fd2c3ff9c16f9ecfc093";
  }

  static const char* value(const C42_LocomotionAndStability::C42Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C42_LocomotionAndStability::C42Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C42";
  }

  static const char* value(const C42_LocomotionAndStability::C42Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C42_LocomotionAndStability::C42Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "664024711124fd2c3ff9c16f9ecfc093";
  }

  static const char* value(const C42_LocomotionAndStability::C42Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C42_LocomotionAndStability::C42Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_LocomotionAndStability/C42";
  }

  static const char* value(const C42_LocomotionAndStability::C42Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C42_LOCOMOTIONANDSTABILITY_SERVICE_C42_H

