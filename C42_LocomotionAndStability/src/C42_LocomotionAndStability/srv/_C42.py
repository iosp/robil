"""autogenerated by genpy from C42_LocomotionAndStability/C42Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C42_LocomotionAndStability.msg

class C42Request(genpy.Message):
  _md5sum = "06ee50e9645cd17f433bd1517f03b870"
  _type = "C42_LocomotionAndStability/C42Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C42_LocomotionAndStability/C34C42_WM Work_mode_msg
C42_LocomotionAndStability/C34C42_PSU Desired_Path_state_update_msg

================================================================================
MSG: C42_LocomotionAndStability/C34C42_WM
int32 Work_mode
int32 Stand_in_place=1
int32 Dynamic_bipedal_walk=2
int32 Quasi_Static_bipedal_walk=3
int32 Crawl=4
int32 Turn_in_place=5
int32 Single_step=6
int32 Brace_for_imact=7
int32 Stand_up=8


================================================================================
MSG: C42_LocomotionAndStability/C34C42_PSU
float32[] PSU_DVEL
float32[] PSU_VP_POS
float32[] PSU_VP_OR
float32[] PSU_VP_TOL

"""
  __slots__ = ['Work_mode_msg','Desired_Path_state_update_msg']
  _slot_types = ['C42_LocomotionAndStability/C34C42_WM','C42_LocomotionAndStability/C34C42_PSU']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Work_mode_msg,Desired_Path_state_update_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C42Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Work_mode_msg is None:
        self.Work_mode_msg = C42_LocomotionAndStability.msg.C34C42_WM()
      if self.Desired_Path_state_update_msg is None:
        self.Desired_Path_state_update_msg = C42_LocomotionAndStability.msg.C34C42_PSU()
    else:
      self.Work_mode_msg = C42_LocomotionAndStability.msg.C34C42_WM()
      self.Desired_Path_state_update_msg = C42_LocomotionAndStability.msg.C34C42_PSU()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.Work_mode_msg.Work_mode))
      length = len(self.Desired_Path_state_update_msg.PSU_DVEL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Desired_Path_state_update_msg.PSU_DVEL))
      length = len(self.Desired_Path_state_update_msg.PSU_VP_POS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Desired_Path_state_update_msg.PSU_VP_POS))
      length = len(self.Desired_Path_state_update_msg.PSU_VP_OR)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Desired_Path_state_update_msg.PSU_VP_OR))
      length = len(self.Desired_Path_state_update_msg.PSU_VP_TOL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Desired_Path_state_update_msg.PSU_VP_TOL))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Work_mode_msg is None:
        self.Work_mode_msg = C42_LocomotionAndStability.msg.C34C42_WM()
      if self.Desired_Path_state_update_msg is None:
        self.Desired_Path_state_update_msg = C42_LocomotionAndStability.msg.C34C42_PSU()
      end = 0
      start = end
      end += 4
      (self.Work_mode_msg.Work_mode,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_DVEL = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_VP_POS = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_VP_OR = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_VP_TOL = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.Work_mode_msg.Work_mode))
      length = len(self.Desired_Path_state_update_msg.PSU_DVEL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Desired_Path_state_update_msg.PSU_DVEL.tostring())
      length = len(self.Desired_Path_state_update_msg.PSU_VP_POS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Desired_Path_state_update_msg.PSU_VP_POS.tostring())
      length = len(self.Desired_Path_state_update_msg.PSU_VP_OR)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Desired_Path_state_update_msg.PSU_VP_OR.tostring())
      length = len(self.Desired_Path_state_update_msg.PSU_VP_TOL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Desired_Path_state_update_msg.PSU_VP_TOL.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Work_mode_msg is None:
        self.Work_mode_msg = C42_LocomotionAndStability.msg.C34C42_WM()
      if self.Desired_Path_state_update_msg is None:
        self.Desired_Path_state_update_msg = C42_LocomotionAndStability.msg.C34C42_PSU()
      end = 0
      start = end
      end += 4
      (self.Work_mode_msg.Work_mode,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_DVEL = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_VP_POS = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_VP_OR = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Desired_Path_state_update_msg.PSU_VP_TOL = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genpy from C42_LocomotionAndStability/C42Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C42_LocomotionAndStability.msg

class C42Response(genpy.Message):
  _md5sum = "0356ab6864acfe03fd83378b62c85831"
  _type = "C42_LocomotionAndStability/C42Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C42_LocomotionAndStability/C42C34_CS Current_work_mode_msg
C42_LocomotionAndStability/C42C34_EVE Events_msg


================================================================================
MSG: C42_LocomotionAndStability/C42C34_CS
int32 Current_Work_mode

================================================================================
MSG: C42_LocomotionAndStability/C42C34_EVE
int32 Events
int32 Finished_task=1
int32 Robot_fell=2
int32 Performance_degradation=3

"""
  __slots__ = ['Current_work_mode_msg','Events_msg']
  _slot_types = ['C42_LocomotionAndStability/C42C34_CS','C42_LocomotionAndStability/C42C34_EVE']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Current_work_mode_msg,Events_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C42Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Current_work_mode_msg is None:
        self.Current_work_mode_msg = C42_LocomotionAndStability.msg.C42C34_CS()
      if self.Events_msg is None:
        self.Events_msg = C42_LocomotionAndStability.msg.C42C34_EVE()
    else:
      self.Current_work_mode_msg = C42_LocomotionAndStability.msg.C42C34_CS()
      self.Events_msg = C42_LocomotionAndStability.msg.C42C34_EVE()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.Current_work_mode_msg.Current_Work_mode, _x.Events_msg.Events))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Current_work_mode_msg is None:
        self.Current_work_mode_msg = C42_LocomotionAndStability.msg.C42C34_CS()
      if self.Events_msg is None:
        self.Events_msg = C42_LocomotionAndStability.msg.C42C34_EVE()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Current_work_mode_msg.Current_Work_mode, _x.Events_msg.Events,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.Current_work_mode_msg.Current_Work_mode, _x.Events_msg.Events))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Current_work_mode_msg is None:
        self.Current_work_mode_msg = C42_LocomotionAndStability.msg.C42C34_CS()
      if self.Events_msg is None:
        self.Events_msg = C42_LocomotionAndStability.msg.C42C34_EVE()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Current_work_mode_msg.Current_Work_mode, _x.Events_msg.Events,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
class C42(object):
  _type          = 'C42_LocomotionAndStability/C42'
  _md5sum = '664024711124fd2c3ff9c16f9ecfc093'
  _request_class  = C42Request
  _response_class = C42Response
