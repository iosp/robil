



/**
 * this class represent the C22_Node,
 * it subscribe to two camera/image topics and provide the path
 **/

#include "pclPlane.h"
#include "MPlane.h"
#include "MapMatrix.h"
#include "C22_GroundRecognitionAndMapping/C22.h"
#include "sensor_msgs/PointCloud.h"
#include <pcl/correspondence.h>
#include <pcl/point_cloud.h>
#include <pcl/common/common_headers.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/io/pcd_io.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/point_types.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <iostream>
#include <boost/thread/thread.hpp>
#include <pcl/sample_consensus/sac_model_plane.h>
class C22_Node{
private:
  ros::NodeHandle nh_;
  ros::Subscriber pointCloud_sub;
  ros::ServiceServer service;
  ros::ServiceServer service2;
  MapMatrix * _myMatrix;
  std::vector<pclPlane*>* _myPlanes;
public:

	/**
	 * constructor, initializes the ROS node, subscribe it to the given topics and instruct it to provide the service
	 * @param left_camera the left camera image topic
	 * @param right_camera the right camera image topic
	 */
	  C22_Node();


	  /**
	   * The call back function executed when a service is requested
	   * it must return true in order to work properly
	   * @param req the request message, generated by the node requesting the service
	   * @param res the response message, generated by the service node when a service is requested
	   */
	  bool proccess(C22_GroundRecognitionAndMapping::C22::Request  &req,
			C22_GroundRecognitionAndMapping::C22::Response &res );

	  bool proccess2(C22_GroundRecognitionAndMapping::C22C24::Request  &req,
	  			C22_GroundRecognitionAndMapping::C22C24::Response &res );

	  /**
	   * The call back function executed when a data is available
	   * @param left_msg ROS mesage with image data from the left camera topic
	   * @param right_msg ROS mesage with image data from the right camera topic
	   */
	  void callback(const sensor_msgs::PointCloud2& pclMsg);

};
