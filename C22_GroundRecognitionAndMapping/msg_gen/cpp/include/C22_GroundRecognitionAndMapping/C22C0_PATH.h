/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C22_GroundRecognitionAndMapping/msg/C22C0_PATH.msg */
#ifndef C22_GROUNDRECOGNITIONANDMAPPING_MESSAGE_C22C0_PATH_H
#define C22_GROUNDRECOGNITIONANDMAPPING_MESSAGE_C22C0_PATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C22_GroundRecognitionAndMapping
{
template <class ContainerAllocator>
struct C22C0_PATH_ {
  typedef C22C0_PATH_<ContainerAllocator> Type;

  C22C0_PATH_()
  : PATH_Left()
  , PATH_Right()
  , PATH_Slope(0.0)
  , PATH_ROU(0)
  {
  }

  C22C0_PATH_(const ContainerAllocator& _alloc)
  : PATH_Left(_alloc)
  , PATH_Right(_alloc)
  , PATH_Slope(0.0)
  , PATH_ROU(0)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PATH_Left_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PATH_Left;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PATH_Right_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PATH_Right;

  typedef float _PATH_Slope_type;
  float PATH_Slope;

  typedef int32_t _PATH_ROU_type;
  int32_t PATH_ROU;


  typedef boost::shared_ptr< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C22C0_PATH
typedef  ::C22_GroundRecognitionAndMapping::C22C0_PATH_<std::allocator<void> > C22C0_PATH;

typedef boost::shared_ptr< ::C22_GroundRecognitionAndMapping::C22C0_PATH> C22C0_PATHPtr;
typedef boost::shared_ptr< ::C22_GroundRecognitionAndMapping::C22C0_PATH const> C22C0_PATHConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C22_GroundRecognitionAndMapping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> > {
  static const char* value() 
  {
    return "78d5bbd55733684e8696339798d3f8ae";
  }

  static const char* value(const  ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x78d5bbd55733684eULL;
  static const uint64_t static_value2 = 0x8696339798d3f8aeULL;
};

template<class ContainerAllocator>
struct DataType< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C22_GroundRecognitionAndMapping/C22C0_PATH";
  }

  static const char* value(const  ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] PATH_Left\n\
float32[] PATH_Right\n\
float32 PATH_Slope\n\
int32 PATH_ROU\n\
\n\
";
  }

  static const char* value(const  ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PATH_Left);
    stream.next(m.PATH_Right);
    stream.next(m.PATH_Slope);
    stream.next(m.PATH_ROU);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C22C0_PATH_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C22_GroundRecognitionAndMapping::C22C0_PATH_<ContainerAllocator> & v) 
  {
    s << indent << "PATH_Left[]" << std::endl;
    for (size_t i = 0; i < v.PATH_Left.size(); ++i)
    {
      s << indent << "  PATH_Left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PATH_Left[i]);
    }
    s << indent << "PATH_Right[]" << std::endl;
    for (size_t i = 0; i < v.PATH_Right.size(); ++i)
    {
      s << indent << "  PATH_Right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PATH_Right[i]);
    }
    s << indent << "PATH_Slope: ";
    Printer<float>::stream(s, indent + "  ", v.PATH_Slope);
    s << indent << "PATH_ROU: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PATH_ROU);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C22_GROUNDRECOGNITIONANDMAPPING_MESSAGE_C22C0_PATH_H

