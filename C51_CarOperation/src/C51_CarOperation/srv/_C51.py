"""autogenerated by genpy from C51_CarOperation/C51Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C51_CarOperation.msg

class C51Request(genpy.Message):
  _md5sum = "8461b9eb687a36bbf117720d381ba9f5"
  _type = "C51_CarOperation/C51Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C51_CarOperation/C0C51_CL car_class
C51_CarOperation/C0C51_ST start_stop_car
C51_CarOperation/C0C51_PAR velocity_parameters
C51_CarOperation/C0C51_TRA travel_parameters

================================================================================
MSG: C51_CarOperation/C0C51_CL
float32 car

================================================================================
MSG: C51_CarOperation/C0C51_ST
int32 car_start_stop
int32 START_CAR=1
int32 STOP_CAR=0

================================================================================
MSG: C51_CarOperation/C0C51_PAR
float32 PARV_VM
float32 PARV_VT

================================================================================
MSG: C51_CarOperation/C0C51_TRA
string TRA_RNDF
string TAR_MDF
string TAR_DES

"""
  __slots__ = ['car_class','start_stop_car','velocity_parameters','travel_parameters']
  _slot_types = ['C51_CarOperation/C0C51_CL','C51_CarOperation/C0C51_ST','C51_CarOperation/C0C51_PAR','C51_CarOperation/C0C51_TRA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       car_class,start_stop_car,velocity_parameters,travel_parameters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C51Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.car_class is None:
        self.car_class = C51_CarOperation.msg.C0C51_CL()
      if self.start_stop_car is None:
        self.start_stop_car = C51_CarOperation.msg.C0C51_ST()
      if self.velocity_parameters is None:
        self.velocity_parameters = C51_CarOperation.msg.C0C51_PAR()
      if self.travel_parameters is None:
        self.travel_parameters = C51_CarOperation.msg.C0C51_TRA()
    else:
      self.car_class = C51_CarOperation.msg.C0C51_CL()
      self.start_stop_car = C51_CarOperation.msg.C0C51_ST()
      self.velocity_parameters = C51_CarOperation.msg.C0C51_PAR()
      self.travel_parameters = C51_CarOperation.msg.C0C51_TRA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_fi2f.pack(_x.car_class.car, _x.start_stop_car.car_start_stop, _x.velocity_parameters.PARV_VM, _x.velocity_parameters.PARV_VT))
      _x = self.travel_parameters.TRA_RNDF
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.travel_parameters.TAR_MDF
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.travel_parameters.TAR_DES
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.car_class is None:
        self.car_class = C51_CarOperation.msg.C0C51_CL()
      if self.start_stop_car is None:
        self.start_stop_car = C51_CarOperation.msg.C0C51_ST()
      if self.velocity_parameters is None:
        self.velocity_parameters = C51_CarOperation.msg.C0C51_PAR()
      if self.travel_parameters is None:
        self.travel_parameters = C51_CarOperation.msg.C0C51_TRA()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.car_class.car, _x.start_stop_car.car_start_stop, _x.velocity_parameters.PARV_VM, _x.velocity_parameters.PARV_VT,) = _struct_fi2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.travel_parameters.TRA_RNDF = str[start:end].decode('utf-8')
      else:
        self.travel_parameters.TRA_RNDF = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.travel_parameters.TAR_MDF = str[start:end].decode('utf-8')
      else:
        self.travel_parameters.TAR_MDF = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.travel_parameters.TAR_DES = str[start:end].decode('utf-8')
      else:
        self.travel_parameters.TAR_DES = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_fi2f.pack(_x.car_class.car, _x.start_stop_car.car_start_stop, _x.velocity_parameters.PARV_VM, _x.velocity_parameters.PARV_VT))
      _x = self.travel_parameters.TRA_RNDF
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.travel_parameters.TAR_MDF
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.travel_parameters.TAR_DES
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.car_class is None:
        self.car_class = C51_CarOperation.msg.C0C51_CL()
      if self.start_stop_car is None:
        self.start_stop_car = C51_CarOperation.msg.C0C51_ST()
      if self.velocity_parameters is None:
        self.velocity_parameters = C51_CarOperation.msg.C0C51_PAR()
      if self.travel_parameters is None:
        self.travel_parameters = C51_CarOperation.msg.C0C51_TRA()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.car_class.car, _x.start_stop_car.car_start_stop, _x.velocity_parameters.PARV_VM, _x.velocity_parameters.PARV_VT,) = _struct_fi2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.travel_parameters.TRA_RNDF = str[start:end].decode('utf-8')
      else:
        self.travel_parameters.TRA_RNDF = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.travel_parameters.TAR_MDF = str[start:end].decode('utf-8')
      else:
        self.travel_parameters.TAR_MDF = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.travel_parameters.TAR_DES = str[start:end].decode('utf-8')
      else:
        self.travel_parameters.TAR_DES = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fi2f = struct.Struct("<fi2f")
"""autogenerated by genpy from C51_CarOperation/C51Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C51_CarOperation.msg

class C51Response(genpy.Message):
  _md5sum = "7442f59f7ac3cb421b554533cfdc87e5"
  _type = "C51_CarOperation/C51Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C51_CarOperation/C51C0_NOR Normal_abnormal_travel
C51_CarOperation/C51C0_OPO Car_Position


================================================================================
MSG: C51_CarOperation/C51C0_NOR
int32 normal_abnormal_travel
int32 NORMAL_TRAVEL=0
int32 ABNORMAL_TRAVEL=1

================================================================================
MSG: C51_CarOperation/C51C0_OPO
int32 x
int32 y
int32 z

"""
  __slots__ = ['Normal_abnormal_travel','Car_Position']
  _slot_types = ['C51_CarOperation/C51C0_NOR','C51_CarOperation/C51C0_OPO']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Normal_abnormal_travel,Car_Position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C51Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Normal_abnormal_travel is None:
        self.Normal_abnormal_travel = C51_CarOperation.msg.C51C0_NOR()
      if self.Car_Position is None:
        self.Car_Position = C51_CarOperation.msg.C51C0_OPO()
    else:
      self.Normal_abnormal_travel = C51_CarOperation.msg.C51C0_NOR()
      self.Car_Position = C51_CarOperation.msg.C51C0_OPO()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.Normal_abnormal_travel.normal_abnormal_travel, _x.Car_Position.x, _x.Car_Position.y, _x.Car_Position.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Normal_abnormal_travel is None:
        self.Normal_abnormal_travel = C51_CarOperation.msg.C51C0_NOR()
      if self.Car_Position is None:
        self.Car_Position = C51_CarOperation.msg.C51C0_OPO()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.Normal_abnormal_travel.normal_abnormal_travel, _x.Car_Position.x, _x.Car_Position.y, _x.Car_Position.z,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.Normal_abnormal_travel.normal_abnormal_travel, _x.Car_Position.x, _x.Car_Position.y, _x.Car_Position.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Normal_abnormal_travel is None:
        self.Normal_abnormal_travel = C51_CarOperation.msg.C51C0_NOR()
      if self.Car_Position is None:
        self.Car_Position = C51_CarOperation.msg.C51C0_OPO()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.Normal_abnormal_travel.normal_abnormal_travel, _x.Car_Position.x, _x.Car_Position.y, _x.Car_Position.z,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i = struct.Struct("<4i")
class C51(object):
  _type          = 'C51_CarOperation/C51'
  _md5sum = '1034508cae6a9c4a3a01b3856e8fe54d'
  _request_class  = C51Request
  _response_class = C51Response
