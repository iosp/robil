"""autogenerated by genpy from C51_CarOperation/DriveFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class DriveFeedback(genpy.Message):
  _md5sum = "9909bb02b6aba0de62539c9a4f13afc3"
  _type = "C51_CarOperation/DriveFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback

geometry_msgs/Point[] WayPointsGiven
geometry_msgs/Point LastWPpassed
geometry_msgs/Point MyLoc4LastWP




================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['WayPointsGiven','LastWPpassed','MyLoc4LastWP']
  _slot_types = ['geometry_msgs/Point[]','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       WayPointsGiven,LastWPpassed,MyLoc4LastWP

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriveFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.WayPointsGiven is None:
        self.WayPointsGiven = []
      if self.LastWPpassed is None:
        self.LastWPpassed = geometry_msgs.msg.Point()
      if self.MyLoc4LastWP is None:
        self.MyLoc4LastWP = geometry_msgs.msg.Point()
    else:
      self.WayPointsGiven = []
      self.LastWPpassed = geometry_msgs.msg.Point()
      self.MyLoc4LastWP = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.WayPointsGiven)
      buff.write(_struct_I.pack(length))
      for val1 in self.WayPointsGiven:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6d.pack(_x.LastWPpassed.x, _x.LastWPpassed.y, _x.LastWPpassed.z, _x.MyLoc4LastWP.x, _x.MyLoc4LastWP.y, _x.MyLoc4LastWP.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.WayPointsGiven is None:
        self.WayPointsGiven = None
      if self.LastWPpassed is None:
        self.LastWPpassed = geometry_msgs.msg.Point()
      if self.MyLoc4LastWP is None:
        self.MyLoc4LastWP = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WayPointsGiven = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.WayPointsGiven.append(val1)
      _x = self
      start = end
      end += 48
      (_x.LastWPpassed.x, _x.LastWPpassed.y, _x.LastWPpassed.z, _x.MyLoc4LastWP.x, _x.MyLoc4LastWP.y, _x.MyLoc4LastWP.z,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.WayPointsGiven)
      buff.write(_struct_I.pack(length))
      for val1 in self.WayPointsGiven:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6d.pack(_x.LastWPpassed.x, _x.LastWPpassed.y, _x.LastWPpassed.z, _x.MyLoc4LastWP.x, _x.MyLoc4LastWP.y, _x.MyLoc4LastWP.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.WayPointsGiven is None:
        self.WayPointsGiven = None
      if self.LastWPpassed is None:
        self.LastWPpassed = geometry_msgs.msg.Point()
      if self.MyLoc4LastWP is None:
        self.MyLoc4LastWP = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WayPointsGiven = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.WayPointsGiven.append(val1)
      _x = self
      start = end
      end += 48
      (_x.LastWPpassed.x, _x.LastWPpassed.y, _x.LastWPpassed.z, _x.MyLoc4LastWP.x, _x.MyLoc4LastWP.y, _x.MyLoc4LastWP.z,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_3d = struct.Struct("<3d")
