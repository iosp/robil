/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C34_Executer/srv/cd.srv */
#ifndef C34_EXECUTER_SERVICE_CD_H
#define C34_EXECUTER_SERVICE_CD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace C34_Executer
{
template <class ContainerAllocator>
struct cdRequest_ {
  typedef cdRequest_<ContainerAllocator> Type;

  cdRequest_()
  : path()
  {
  }

  cdRequest_(const ContainerAllocator& _alloc)
  : path(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  path;


  typedef boost::shared_ptr< ::C34_Executer::cdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C34_Executer::cdRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cdRequest
typedef  ::C34_Executer::cdRequest_<std::allocator<void> > cdRequest;

typedef boost::shared_ptr< ::C34_Executer::cdRequest> cdRequestPtr;
typedef boost::shared_ptr< ::C34_Executer::cdRequest const> cdRequestConstPtr;


template <class ContainerAllocator>
struct cdResponse_ {
  typedef cdResponse_<ContainerAllocator> Type;

  cdResponse_()
  : location()
  {
  }

  cdResponse_(const ContainerAllocator& _alloc)
  : location(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  location;


  typedef boost::shared_ptr< ::C34_Executer::cdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C34_Executer::cdResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cdResponse
typedef  ::C34_Executer::cdResponse_<std::allocator<void> > cdResponse;

typedef boost::shared_ptr< ::C34_Executer::cdResponse> cdResponsePtr;
typedef boost::shared_ptr< ::C34_Executer::cdResponse const> cdResponseConstPtr;

struct cd
{

typedef cdRequest Request;
typedef cdResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct cd
} // namespace C34_Executer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::cdRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::cdRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C34_Executer::cdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d00cd540af97efeb6b1589112fab63e";
  }

  static const char* value(const  ::C34_Executer::cdRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1d00cd540af97efeULL;
  static const uint64_t static_value2 = 0xb6b1589112fab63eULL;
};

template<class ContainerAllocator>
struct DataType< ::C34_Executer::cdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/cdRequest";
  }

  static const char* value(const  ::C34_Executer::cdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C34_Executer::cdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string path\n\
\n\
";
  }

  static const char* value(const  ::C34_Executer::cdRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::cdResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::cdResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C34_Executer::cdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03da474bc61cfeb81a8854b4ca05bafa";
  }

  static const char* value(const  ::C34_Executer::cdResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x03da474bc61cfeb8ULL;
  static const uint64_t static_value2 = 0x1a8854b4ca05bafaULL;
};

template<class ContainerAllocator>
struct DataType< ::C34_Executer::cdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/cdResponse";
  }

  static const char* value(const  ::C34_Executer::cdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C34_Executer::cdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string location\n\
\n\
\n\
";
  }

  static const char* value(const  ::C34_Executer::cdResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C34_Executer::cdRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cdRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C34_Executer::cdResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cdResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C34_Executer::cd> {
  static const char* value() 
  {
    return "384058fb0d9614cd7c9170628fd63f12";
  }

  static const char* value(const C34_Executer::cd&) { return value(); } 
};

template<>
struct DataType<C34_Executer::cd> {
  static const char* value() 
  {
    return "C34_Executer/cd";
  }

  static const char* value(const C34_Executer::cd&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C34_Executer::cdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "384058fb0d9614cd7c9170628fd63f12";
  }

  static const char* value(const C34_Executer::cdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C34_Executer::cdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/cd";
  }

  static const char* value(const C34_Executer::cdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C34_Executer::cdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "384058fb0d9614cd7c9170628fd63f12";
  }

  static const char* value(const C34_Executer::cdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C34_Executer::cdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/cd";
  }

  static const char* value(const C34_Executer::cdResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C34_EXECUTER_SERVICE_CD_H

