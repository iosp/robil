/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C34_Executer/srv/lookup.srv */
#ifndef C34_EXECUTER_SERVICE_LOOKUP_H
#define C34_EXECUTER_SERVICE_LOOKUP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace C34_Executer
{
template <class ContainerAllocator>
struct lookupRequest_ {
  typedef lookupRequest_<ContainerAllocator> Type;

  lookupRequest_()
  : filename()
  {
  }

  lookupRequest_(const ContainerAllocator& _alloc)
  : filename(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;


  typedef boost::shared_ptr< ::C34_Executer::lookupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C34_Executer::lookupRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct lookupRequest
typedef  ::C34_Executer::lookupRequest_<std::allocator<void> > lookupRequest;

typedef boost::shared_ptr< ::C34_Executer::lookupRequest> lookupRequestPtr;
typedef boost::shared_ptr< ::C34_Executer::lookupRequest const> lookupRequestConstPtr;


template <class ContainerAllocator>
struct lookupResponse_ {
  typedef lookupResponse_<ContainerAllocator> Type;

  lookupResponse_()
  : output()
  {
  }

  lookupResponse_(const ContainerAllocator& _alloc)
  : output(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _output_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  output;


  typedef boost::shared_ptr< ::C34_Executer::lookupResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C34_Executer::lookupResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct lookupResponse
typedef  ::C34_Executer::lookupResponse_<std::allocator<void> > lookupResponse;

typedef boost::shared_ptr< ::C34_Executer::lookupResponse> lookupResponsePtr;
typedef boost::shared_ptr< ::C34_Executer::lookupResponse const> lookupResponseConstPtr;

struct lookup
{

typedef lookupRequest Request;
typedef lookupResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct lookup
} // namespace C34_Executer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::lookupRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::lookupRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C34_Executer::lookupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "030824f52a0628ead956fb9d67e66ae9";
  }

  static const char* value(const  ::C34_Executer::lookupRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x030824f52a0628eaULL;
  static const uint64_t static_value2 = 0xd956fb9d67e66ae9ULL;
};

template<class ContainerAllocator>
struct DataType< ::C34_Executer::lookupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/lookupRequest";
  }

  static const char* value(const  ::C34_Executer::lookupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C34_Executer::lookupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string filename\n\
\n\
";
  }

  static const char* value(const  ::C34_Executer::lookupRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::lookupResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::lookupResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C34_Executer::lookupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0825d95fdfa2c8f4bbb4e9c74bccd3fd";
  }

  static const char* value(const  ::C34_Executer::lookupResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0825d95fdfa2c8f4ULL;
  static const uint64_t static_value2 = 0xbbb4e9c74bccd3fdULL;
};

template<class ContainerAllocator>
struct DataType< ::C34_Executer::lookupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/lookupResponse";
  }

  static const char* value(const  ::C34_Executer::lookupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C34_Executer::lookupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string output\n\
\n\
\n\
";
  }

  static const char* value(const  ::C34_Executer::lookupResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C34_Executer::lookupRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filename);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct lookupRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C34_Executer::lookupResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.output);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct lookupResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C34_Executer::lookup> {
  static const char* value() 
  {
    return "f3cba7aefdafd396c5a52623838430b7";
  }

  static const char* value(const C34_Executer::lookup&) { return value(); } 
};

template<>
struct DataType<C34_Executer::lookup> {
  static const char* value() 
  {
    return "C34_Executer/lookup";
  }

  static const char* value(const C34_Executer::lookup&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C34_Executer::lookupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3cba7aefdafd396c5a52623838430b7";
  }

  static const char* value(const C34_Executer::lookupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C34_Executer::lookupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/lookup";
  }

  static const char* value(const C34_Executer::lookupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C34_Executer::lookupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3cba7aefdafd396c5a52623838430b7";
  }

  static const char* value(const C34_Executer::lookupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C34_Executer::lookupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/lookup";
  }

  static const char* value(const C34_Executer::lookupResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C34_EXECUTER_SERVICE_LOOKUP_H

