
==============================
monitor time
==============================

C35_Monitoring
# Description: The monitor performs the following:
1. On initialization, computes statistics for the given behavior tree which include success probabilities and time distributions given success/failure.
2. During runtime, the C35 node listens to messages from executor, and maintains statistics regarding succ/fail and execution times of all nodes in the BTree.
3. When running a Monitoring task (e.g., MonitorTime(param=563a39ca-99df-45dc-a369-73c7af2fe951)), the task monitors the node with the id given in param. If the node takes longer than (T*average_computed_time) for that node, it exists with failure, which terminates the monitored node (the monitoring node is always the monitored node's sibling in the BTree, and their parent is always a parallel node).


How to Check:

============
Requires python ver 2.7.3. In order to test the code run the following:
1. Launch drc sim
2. run designer and executer
3. rosrun C46_MountVehicle C46_Node.py
4. rosrun C35_Monitoring C35_Node.py, in  C35_Node, make sure that you sent the right xml file. for example: MonitorTimeServer("tests/simple_monitor_example.xml", "MonitorTime")
5. in designer load tree located in C35_monitoring/src/tests/simple_monitoring_example.xml. IF THE DESIGNER REFUSES, MOVE FILE TO C34_Designer/plans/ )
6. run the tree, resume

How to Check (skill4) (oudated):
============
Requires python ver 2.7.3. In order to test the code run the following:
1. Launch drc sim
2. run designer and executer
3. run all relevant nodes for skill4
4. rosrun C35_Monitoring C35_Node.py
5. in designer load tree located in C35_monitoring/src/tests/skill4.xml
6. run the tree

Known Bugs:
==========


Known Limitations:
=================
xml file is hardcoded, instead of being given as cmd line argument.



=======================
Monitor specific tasks
=======================

MONITOR WAYPOINT OF DRIVING MODULE

# Description: This monitor works in parallel to "WayPointsDriving" in C51_CarOperation.
Performs the following:
1. Saves the way points sent by the path planner and the current location passed by the vehicle.
2. Compares the vehicle's real location to the accurate way point and calculates the gap.
3. Check whether the current driving module run has passed the threshold, if so, produces an alert.

How to Check:
============
Requires python ver 2.7.3. , drc-2.0 and gazebo-1.4.0 and up.
In order to test the code run the following:
1.C0_Scripts/clear_all.sh
2.C0_Scripts/make_all.sh
3. follow the instructions in: http://www.robil.org/trac_robil/wiki/WalkingdexterityPage to upload the C51_CarOperation module.
  3.1. in C51_CarOperation: rosrun C51_CarOperation DRC_Vehicle_Init_client.py
  3.2. continue to run C51_CarOperation in stage 9
4. rosrun C34_Designer run.sh
5. rosrun C35_Monitoring C35_Node.py
6. rosrun C34_Executer executer
7. in designer, open tree located in C35_monitoring/src/tests/plan26-02-13-131747286.xml  (IF THE DESIGNER REFUSES, MOVE FILE TO C34_Designer/plans/ )
8. run the tree, resume.
9. in C51_CarOperation: rosrun C51_CarOperation DRC_Vehicle_Drive_client.py

Known Bugs:
==========


Known Limitations:
=================
TODO - Need to get threshold function from Oded.
TODO - Need to formalize the alerts raised by the monitor




=======================
Timeout Monitor, Falling Monitor, and Stability Monitor
=======================
#description (Timeout Monitor): a task which receives as a parameter a threshold value, and after threshold seconds, aborts with failure, unless preempted.
#description (Falling Monitor): a task which listens on topic /C35/falling for boolean values [0,1], and aborts with failure when 1 is heard (meaning the robot has fallen).
#description (Stability Monitor): a task which listens on topic /C35/stability for int8 values [1-5] (5 being the most stable), and aborts with failure when 1 is heard (meaning the robot is dangerously unstable).
in order to run test (requires stand_up module):
roslaunch atlas_utils atlas.launch
rosrun C34_Executer executer
rosrun C34_Designer run.sh 
rosrun C35_Monitoring TimeoutMonitor.py
rosrun C35_Monitoring FallingMonitor.py
rosrun C35_Monitoring StabilityMonitor.py
rosrun C48_StandUp Fall.py
rosrun C48_StandUp C48_StandUp.py
C34_Designer/plans/MonitoredStandUp.xml
run and resume
threshold values can be changed in the xml files, just change the threshold parameters.
"falling messages" can be sent from command line using: rostopic pub -1 /C35/falling std_msgs/Bool -- 1
"stability messages" can be sent from command line using: rostopic pub -1 /C35/stability std_msgs/Int8 -- [1-5]

Known Bugs:
==========


Known Limitations:
=================
Enable VRC_CHEATS_ENABLED=1


=======================
Driving Monitor - monitors the driving module and makes sure it actually starts moving.
=======================
roslaunch C51_CarOperation iddqd.launch
roslaunch C51_CarOperation C51_completeLuanch.launch 
rosrun C35_Monitoring DrivingMonitor.py
Open skill4_driving_1.xml in designer and run.



=======================
Walking Monitor - monitors the walking module and makes sure it actually starts moving.
=======================
roslaunch atlas_utils vrc_task_2.launch
roslaunch C25_GlobalPosition C25.launch
rosrun C42_DynamicLocomotion DynamicLocomotion.py
rosrun C35_Monitoring WalkingMonitor.py
rosrun C34_Designer run.sh
rosrun C34_Executer executer
Open comp1walking.xml in designermean+-2*stdev and run.

to move the robot use:
rosrun C42_DynamicLocomotion C31_Clone_VRC2_StartingPentoGa2.py


=======================
Anomaly detector - Tries to find anomalities in the behaviour of nodes in the tree.
=======================
Description:
this module subscribes to the executer/stak_stream topic and maintains statistics on the runtimes and success/fail ratios of nodes in the behaviour tree. The underlying assumption is that the bahaviour in the beginning of the run is "normal", and if there is a major change in the bahaviour, this is an anomaly and should be reported.

If a certain node exisited with success after X seconds, we check whether X is within the range [mean-2*stdev,mean+2*stdev], where mean and stdev are computed on the recorded running times of the node, when it succeeded. When a node fails, the same is done but mean and stdev are computed on the failed runtimes. The two cases are separated, and we rely on two separate gaussians, in order to avoid computing a mixture of gaussians (one for success and one for fail).

When an anomaly is found in node Y, the node's id is published as a String on the topic "C35/anomaly".

To run:
Use tree "standup_with_anomaly_detection.xml". Run the relevant tasks.
It's better to use a tree that has loops, and in which some tasks run more that 5 times.
rosrun C35_monitoring AnomalyDetector
Run executor and designer and some atlas.

=======================
Grasping monitor for left and right palm
=======================
#description (Grasping monitor for left and right palm): a task which listens on topic "/sandia_hands/l_hand/tactile_raw", for palm force values on left hand, or "/sandia_hands/r_hand/tactile_raw" for right hand.
publish on topic - "C35/grasp_force_l" for left palm or "C35/grasp_force_r" for right arm , publish message only if power greater the minumum was detected.
message structure:
f0:index_finger force;f1:middle_finger force;f2:little_finger force;f3:thumb force;palm:palm force;


In order to run left palm monitor:
rosrun C35_Monitoring GraspingMonitorLeft.py

In order to run right palm monitor:
rosrun C35_Monitoring GraspingMonitorRight.py


Known Bugs:
==========


Known Limitations:
=================
Very little change in force has been witnessed during debugging.
if sandia_hands(drc sim) changes, the code won't work properly.


