"""autogenerated by genpy from C24_ObstacleDetection/C24Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C24_ObstacleDetection.msg

class C24Request(genpy.Message):
  _md5sum = "dc64b6d6f81cc3fffdd2c74c60cbbe26"
  _type = "C24_ObstacleDetection/C24Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C24_ObstacleDetection/C0C24_AZI azimuth
C24_ObstacleDetection/C0C24_CAM camera_sample_rate
C24_ObstacleDetection/C0C24_LAZ laser_sample_rate
C24_ObstacleDetection/C0C24_SIZ minimum_obstacle_size

================================================================================
MSG: C24_ObstacleDetection/C0C24_AZI
float32 azimuth

================================================================================
MSG: C24_ObstacleDetection/C0C24_CAM
int32 frameRatePerSec

================================================================================
MSG: C24_ObstacleDetection/C0C24_LAZ
int32 sampleRatePerSec

================================================================================
MSG: C24_ObstacleDetection/C0C24_SIZ
int32 image_width
int32 image_height

"""
  __slots__ = ['azimuth','camera_sample_rate','laser_sample_rate','minimum_obstacle_size']
  _slot_types = ['C24_ObstacleDetection/C0C24_AZI','C24_ObstacleDetection/C0C24_CAM','C24_ObstacleDetection/C0C24_LAZ','C24_ObstacleDetection/C0C24_SIZ']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       azimuth,camera_sample_rate,laser_sample_rate,minimum_obstacle_size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C24Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.azimuth is None:
        self.azimuth = C24_ObstacleDetection.msg.C0C24_AZI()
      if self.camera_sample_rate is None:
        self.camera_sample_rate = C24_ObstacleDetection.msg.C0C24_CAM()
      if self.laser_sample_rate is None:
        self.laser_sample_rate = C24_ObstacleDetection.msg.C0C24_LAZ()
      if self.minimum_obstacle_size is None:
        self.minimum_obstacle_size = C24_ObstacleDetection.msg.C0C24_SIZ()
    else:
      self.azimuth = C24_ObstacleDetection.msg.C0C24_AZI()
      self.camera_sample_rate = C24_ObstacleDetection.msg.C0C24_CAM()
      self.laser_sample_rate = C24_ObstacleDetection.msg.C0C24_LAZ()
      self.minimum_obstacle_size = C24_ObstacleDetection.msg.C0C24_SIZ()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f4i.pack(_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec, _x.minimum_obstacle_size.image_width, _x.minimum_obstacle_size.image_height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.azimuth is None:
        self.azimuth = C24_ObstacleDetection.msg.C0C24_AZI()
      if self.camera_sample_rate is None:
        self.camera_sample_rate = C24_ObstacleDetection.msg.C0C24_CAM()
      if self.laser_sample_rate is None:
        self.laser_sample_rate = C24_ObstacleDetection.msg.C0C24_LAZ()
      if self.minimum_obstacle_size is None:
        self.minimum_obstacle_size = C24_ObstacleDetection.msg.C0C24_SIZ()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec, _x.minimum_obstacle_size.image_width, _x.minimum_obstacle_size.image_height,) = _struct_f4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f4i.pack(_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec, _x.minimum_obstacle_size.image_width, _x.minimum_obstacle_size.image_height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.azimuth is None:
        self.azimuth = C24_ObstacleDetection.msg.C0C24_AZI()
      if self.camera_sample_rate is None:
        self.camera_sample_rate = C24_ObstacleDetection.msg.C0C24_CAM()
      if self.laser_sample_rate is None:
        self.laser_sample_rate = C24_ObstacleDetection.msg.C0C24_LAZ()
      if self.minimum_obstacle_size is None:
        self.minimum_obstacle_size = C24_ObstacleDetection.msg.C0C24_SIZ()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.azimuth.azimuth, _x.camera_sample_rate.frameRatePerSec, _x.laser_sample_rate.sampleRatePerSec, _x.minimum_obstacle_size.image_width, _x.minimum_obstacle_size.image_height,) = _struct_f4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f4i = struct.Struct("<f4i")
"""autogenerated by genpy from C24_ObstacleDetection/C24Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C24_ObstacleDetection.msg

class C24Response(genpy.Message):
  _md5sum = "8f78f0844a60590a414836e89ccbd4d0"
  _type = "C24_ObstacleDetection/C24Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C24_ObstacleDetection/C24C0_OD objectDetected
C24_ObstacleDetection/C24C0_OPO objectPossition
C24_ObstacleDetection/C24C0_ODIM objectDimensions


================================================================================
MSG: C24_ObstacleDetection/C24C0_OD
int32 ObjectDetected

================================================================================
MSG: C24_ObstacleDetection/C24C0_OPO
C24_ObstacleDetection/TBD position

================================================================================
MSG: C24_ObstacleDetection/TBD
int32 x
int32 y
int32 z

================================================================================
MSG: C24_ObstacleDetection/C24C0_ODIM
C24_ObstacleDetection/TBD min_dimensions
C24_ObstacleDetection/TBD max_dimensions

"""
  __slots__ = ['objectDetected','objectPossition','objectDimensions']
  _slot_types = ['C24_ObstacleDetection/C24C0_OD','C24_ObstacleDetection/C24C0_OPO','C24_ObstacleDetection/C24C0_ODIM']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objectDetected,objectPossition,objectDimensions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C24Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objectDetected is None:
        self.objectDetected = C24_ObstacleDetection.msg.C24C0_OD()
      if self.objectPossition is None:
        self.objectPossition = C24_ObstacleDetection.msg.C24C0_OPO()
      if self.objectDimensions is None:
        self.objectDimensions = C24_ObstacleDetection.msg.C24C0_ODIM()
    else:
      self.objectDetected = C24_ObstacleDetection.msg.C24C0_OD()
      self.objectPossition = C24_ObstacleDetection.msg.C24C0_OPO()
      self.objectDimensions = C24_ObstacleDetection.msg.C24C0_ODIM()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10i.pack(_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objectDetected is None:
        self.objectDetected = C24_ObstacleDetection.msg.C24C0_OD()
      if self.objectPossition is None:
        self.objectPossition = C24_ObstacleDetection.msg.C24C0_OPO()
      if self.objectDimensions is None:
        self.objectDimensions = C24_ObstacleDetection.msg.C24C0_ODIM()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z,) = _struct_10i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10i.pack(_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objectDetected is None:
        self.objectDetected = C24_ObstacleDetection.msg.C24C0_OD()
      if self.objectPossition is None:
        self.objectPossition = C24_ObstacleDetection.msg.C24C0_OPO()
      if self.objectDimensions is None:
        self.objectDimensions = C24_ObstacleDetection.msg.C24C0_ODIM()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.objectDetected.ObjectDetected, _x.objectPossition.position.x, _x.objectPossition.position.y, _x.objectPossition.position.z, _x.objectDimensions.min_dimensions.x, _x.objectDimensions.min_dimensions.y, _x.objectDimensions.min_dimensions.z, _x.objectDimensions.max_dimensions.x, _x.objectDimensions.max_dimensions.y, _x.objectDimensions.max_dimensions.z,) = _struct_10i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10i = struct.Struct("<10i")
class C24(object):
  _type          = 'C24_ObstacleDetection/C24'
  _md5sum = '8f0e85e5c10133ee7ef1795738e66441'
  _request_class  = C24Request
  _response_class = C24Response
