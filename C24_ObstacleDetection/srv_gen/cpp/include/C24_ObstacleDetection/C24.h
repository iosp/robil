/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C24_ObstacleDetection/srv/C24.srv */
#ifndef C24_OBSTACLEDETECTION_SERVICE_C24_H
#define C24_OBSTACLEDETECTION_SERVICE_C24_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C24_ObstacleDetection/C0C24_AZI.h"
#include "C24_ObstacleDetection/C0C24_CAM.h"
#include "C24_ObstacleDetection/C0C24_LAZ.h"
#include "C24_ObstacleDetection/C0C24_SIZ.h"


#include "C24_ObstacleDetection/C24C0_OD.h"
#include "C24_ObstacleDetection/C24C0_OPO.h"
#include "C24_ObstacleDetection/C24C0_ODIM.h"

namespace C24_ObstacleDetection
{
template <class ContainerAllocator>
struct C24Request_ {
  typedef C24Request_<ContainerAllocator> Type;

  C24Request_()
  : azimuth()
  , camera_sample_rate()
  , laser_sample_rate()
  , minimum_obstacle_size()
  {
  }

  C24Request_(const ContainerAllocator& _alloc)
  : azimuth(_alloc)
  , camera_sample_rate(_alloc)
  , laser_sample_rate(_alloc)
  , minimum_obstacle_size(_alloc)
  {
  }

  typedef  ::C24_ObstacleDetection::C0C24_AZI_<ContainerAllocator>  _azimuth_type;
   ::C24_ObstacleDetection::C0C24_AZI_<ContainerAllocator>  azimuth;

  typedef  ::C24_ObstacleDetection::C0C24_CAM_<ContainerAllocator>  _camera_sample_rate_type;
   ::C24_ObstacleDetection::C0C24_CAM_<ContainerAllocator>  camera_sample_rate;

  typedef  ::C24_ObstacleDetection::C0C24_LAZ_<ContainerAllocator>  _laser_sample_rate_type;
   ::C24_ObstacleDetection::C0C24_LAZ_<ContainerAllocator>  laser_sample_rate;

  typedef  ::C24_ObstacleDetection::C0C24_SIZ_<ContainerAllocator>  _minimum_obstacle_size_type;
   ::C24_ObstacleDetection::C0C24_SIZ_<ContainerAllocator>  minimum_obstacle_size;


  typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C24Request
typedef  ::C24_ObstacleDetection::C24Request_<std::allocator<void> > C24Request;

typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Request> C24RequestPtr;
typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Request const> C24RequestConstPtr;


template <class ContainerAllocator>
struct C24Response_ {
  typedef C24Response_<ContainerAllocator> Type;

  C24Response_()
  : objectDetected()
  , objectPossition()
  , objectDimensions()
  {
  }

  C24Response_(const ContainerAllocator& _alloc)
  : objectDetected(_alloc)
  , objectPossition(_alloc)
  , objectDimensions(_alloc)
  {
  }

  typedef  ::C24_ObstacleDetection::C24C0_OD_<ContainerAllocator>  _objectDetected_type;
   ::C24_ObstacleDetection::C24C0_OD_<ContainerAllocator>  objectDetected;

  typedef  ::C24_ObstacleDetection::C24C0_OPO_<ContainerAllocator>  _objectPossition_type;
   ::C24_ObstacleDetection::C24C0_OPO_<ContainerAllocator>  objectPossition;

  typedef  ::C24_ObstacleDetection::C24C0_ODIM_<ContainerAllocator>  _objectDimensions_type;
   ::C24_ObstacleDetection::C24C0_ODIM_<ContainerAllocator>  objectDimensions;


  typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C24Response
typedef  ::C24_ObstacleDetection::C24Response_<std::allocator<void> > C24Response;

typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Response> C24ResponsePtr;
typedef boost::shared_ptr< ::C24_ObstacleDetection::C24Response const> C24ResponseConstPtr;

struct C24
{

typedef C24Request Request;
typedef C24Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C24
} // namespace C24_ObstacleDetection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C24_ObstacleDetection::C24Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc64b6d6f81cc3fffdd2c74c60cbbe26";
  }

  static const char* value(const  ::C24_ObstacleDetection::C24Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdc64b6d6f81cc3ffULL;
  static const uint64_t static_value2 = 0xfdd2c74c60cbbe26ULL;
};

template<class ContainerAllocator>
struct DataType< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C24Request";
  }

  static const char* value(const  ::C24_ObstacleDetection::C24Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C0C24_AZI azimuth\n\
C24_ObstacleDetection/C0C24_CAM camera_sample_rate\n\
C24_ObstacleDetection/C0C24_LAZ laser_sample_rate\n\
C24_ObstacleDetection/C0C24_SIZ minimum_obstacle_size\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C0C24_AZI\n\
float32 azimuth\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C0C24_CAM\n\
int32 frameRatePerSec\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C0C24_LAZ\n\
int32 sampleRatePerSec\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C0C24_SIZ\n\
int32 image_width\n\
int32 image_height\n\
\n\
";
  }

  static const char* value(const  ::C24_ObstacleDetection::C24Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C24_ObstacleDetection::C24Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8f78f0844a60590a414836e89ccbd4d0";
  }

  static const char* value(const  ::C24_ObstacleDetection::C24Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8f78f0844a60590aULL;
  static const uint64_t static_value2 = 0x414836e89ccbd4d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C24Response";
  }

  static const char* value(const  ::C24_ObstacleDetection::C24Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C24C0_OD objectDetected\n\
C24_ObstacleDetection/C24C0_OPO objectPossition\n\
C24_ObstacleDetection/C24C0_ODIM objectDimensions\n\
\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C24C0_OD\n\
int32 ObjectDetected\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C24C0_OPO\n\
C24_ObstacleDetection/TBD position\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/TBD\n\
int32 x\n\
int32 y\n\
int32 z\n\
\n\
================================================================================\n\
MSG: C24_ObstacleDetection/C24C0_ODIM\n\
C24_ObstacleDetection/TBD min_dimensions\n\
C24_ObstacleDetection/TBD max_dimensions\n\
\n\
";
  }

  static const char* value(const  ::C24_ObstacleDetection::C24Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C24_ObstacleDetection::C24Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.azimuth);
    stream.next(m.camera_sample_rate);
    stream.next(m.laser_sample_rate);
    stream.next(m.minimum_obstacle_size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C24Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C24_ObstacleDetection::C24Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objectDetected);
    stream.next(m.objectPossition);
    stream.next(m.objectDimensions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C24Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C24_ObstacleDetection::C24> {
  static const char* value() 
  {
    return "8f0e85e5c10133ee7ef1795738e66441";
  }

  static const char* value(const C24_ObstacleDetection::C24&) { return value(); } 
};

template<>
struct DataType<C24_ObstacleDetection::C24> {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C24";
  }

  static const char* value(const C24_ObstacleDetection::C24&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C24_ObstacleDetection::C24Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8f0e85e5c10133ee7ef1795738e66441";
  }

  static const char* value(const C24_ObstacleDetection::C24Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C24_ObstacleDetection::C24Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C24";
  }

  static const char* value(const C24_ObstacleDetection::C24Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C24_ObstacleDetection::C24Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8f0e85e5c10133ee7ef1795738e66441";
  }

  static const char* value(const C24_ObstacleDetection::C24Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C24_ObstacleDetection::C24Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C24_ObstacleDetection/C24";
  }

  static const char* value(const C24_ObstacleDetection::C24Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C24_OBSTACLEDETECTION_SERVICE_C24_H

