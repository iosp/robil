"""autogenerated by genpy from C41_BodyControl/C41Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C41_BodyControl.msg

class C41Request(genpy.Message):
  _md5sum = "49ca9a01d314c8ad002be00a2662b518"
  _type = "C41_BodyControl/C41Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C41_BodyControl/C0C41_WM Work_mode_msg
C41_BodyControl/C0C41_TC Torque_Control_msg
C41_BodyControl/C0C41_PVA Position_Velocity_Aceleration_Control_msg
C41_BodyControl/C0C41_LOAD External_Load_msg

================================================================================
MSG: C41_BodyControl/C0C41_WM
int32 Work_mode
int32 Torque_Control=1
int32 PVA_Control=2


================================================================================
MSG: C41_BodyControl/C0C41_TC
float32[] TC_TORQUE

================================================================================
MSG: C41_BodyControl/C0C41_PVA
float32[] PVA_POS
float32[] PVA_VEL
float32[] PVA_ACC

================================================================================
MSG: C41_BodyControl/C0C41_LOAD
float32[] Load

"""
  __slots__ = ['Work_mode_msg','Torque_Control_msg','Position_Velocity_Aceleration_Control_msg','External_Load_msg']
  _slot_types = ['C41_BodyControl/C0C41_WM','C41_BodyControl/C0C41_TC','C41_BodyControl/C0C41_PVA','C41_BodyControl/C0C41_LOAD']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Work_mode_msg,Torque_Control_msg,Position_Velocity_Aceleration_Control_msg,External_Load_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C41Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Work_mode_msg is None:
        self.Work_mode_msg = C41_BodyControl.msg.C0C41_WM()
      if self.Torque_Control_msg is None:
        self.Torque_Control_msg = C41_BodyControl.msg.C0C41_TC()
      if self.Position_Velocity_Aceleration_Control_msg is None:
        self.Position_Velocity_Aceleration_Control_msg = C41_BodyControl.msg.C0C41_PVA()
      if self.External_Load_msg is None:
        self.External_Load_msg = C41_BodyControl.msg.C0C41_LOAD()
    else:
      self.Work_mode_msg = C41_BodyControl.msg.C0C41_WM()
      self.Torque_Control_msg = C41_BodyControl.msg.C0C41_TC()
      self.Position_Velocity_Aceleration_Control_msg = C41_BodyControl.msg.C0C41_PVA()
      self.External_Load_msg = C41_BodyControl.msg.C0C41_LOAD()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.Work_mode_msg.Work_mode))
      length = len(self.Torque_Control_msg.TC_TORQUE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Torque_Control_msg.TC_TORQUE))
      length = len(self.Position_Velocity_Aceleration_Control_msg.PVA_POS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Position_Velocity_Aceleration_Control_msg.PVA_POS))
      length = len(self.Position_Velocity_Aceleration_Control_msg.PVA_VEL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Position_Velocity_Aceleration_Control_msg.PVA_VEL))
      length = len(self.Position_Velocity_Aceleration_Control_msg.PVA_ACC)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Position_Velocity_Aceleration_Control_msg.PVA_ACC))
      length = len(self.External_Load_msg.Load)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.External_Load_msg.Load))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Work_mode_msg is None:
        self.Work_mode_msg = C41_BodyControl.msg.C0C41_WM()
      if self.Torque_Control_msg is None:
        self.Torque_Control_msg = C41_BodyControl.msg.C0C41_TC()
      if self.Position_Velocity_Aceleration_Control_msg is None:
        self.Position_Velocity_Aceleration_Control_msg = C41_BodyControl.msg.C0C41_PVA()
      if self.External_Load_msg is None:
        self.External_Load_msg = C41_BodyControl.msg.C0C41_LOAD()
      end = 0
      start = end
      end += 4
      (self.Work_mode_msg.Work_mode,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Torque_Control_msg.TC_TORQUE = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Position_Velocity_Aceleration_Control_msg.PVA_POS = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Position_Velocity_Aceleration_Control_msg.PVA_VEL = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Position_Velocity_Aceleration_Control_msg.PVA_ACC = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.External_Load_msg.Load = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.Work_mode_msg.Work_mode))
      length = len(self.Torque_Control_msg.TC_TORQUE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Torque_Control_msg.TC_TORQUE.tostring())
      length = len(self.Position_Velocity_Aceleration_Control_msg.PVA_POS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Position_Velocity_Aceleration_Control_msg.PVA_POS.tostring())
      length = len(self.Position_Velocity_Aceleration_Control_msg.PVA_VEL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Position_Velocity_Aceleration_Control_msg.PVA_VEL.tostring())
      length = len(self.Position_Velocity_Aceleration_Control_msg.PVA_ACC)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Position_Velocity_Aceleration_Control_msg.PVA_ACC.tostring())
      length = len(self.External_Load_msg.Load)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.External_Load_msg.Load.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Work_mode_msg is None:
        self.Work_mode_msg = C41_BodyControl.msg.C0C41_WM()
      if self.Torque_Control_msg is None:
        self.Torque_Control_msg = C41_BodyControl.msg.C0C41_TC()
      if self.Position_Velocity_Aceleration_Control_msg is None:
        self.Position_Velocity_Aceleration_Control_msg = C41_BodyControl.msg.C0C41_PVA()
      if self.External_Load_msg is None:
        self.External_Load_msg = C41_BodyControl.msg.C0C41_LOAD()
      end = 0
      start = end
      end += 4
      (self.Work_mode_msg.Work_mode,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Torque_Control_msg.TC_TORQUE = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Position_Velocity_Aceleration_Control_msg.PVA_POS = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Position_Velocity_Aceleration_Control_msg.PVA_VEL = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Position_Velocity_Aceleration_Control_msg.PVA_ACC = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.External_Load_msg.Load = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genpy from C41_BodyControl/C41Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C41_BodyControl.msg

class C41Response(genpy.Message):
  _md5sum = "70d9fc858f6fa6dc7a1d553c7025d37c"
  _type = "C41_BodyControl/C41Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C41_BodyControl/C41C0_AT Actual_torque_on_each_joint_msg
C41_BodyControl/C41C0_APVA Actual_Position_Velocity_Acceleration_of_each_joint_msg


================================================================================
MSG: C41_BodyControl/C41C0_AT
float32[] Actual_torque 

================================================================================
MSG: C41_BodyControl/C41C0_APVA
float32[] Actual_Position
float32[] Actual_Velocity
float32[] Actual_Acceleration 

"""
  __slots__ = ['Actual_torque_on_each_joint_msg','Actual_Position_Velocity_Acceleration_of_each_joint_msg']
  _slot_types = ['C41_BodyControl/C41C0_AT','C41_BodyControl/C41C0_APVA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Actual_torque_on_each_joint_msg,Actual_Position_Velocity_Acceleration_of_each_joint_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C41Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Actual_torque_on_each_joint_msg is None:
        self.Actual_torque_on_each_joint_msg = C41_BodyControl.msg.C41C0_AT()
      if self.Actual_Position_Velocity_Acceleration_of_each_joint_msg is None:
        self.Actual_Position_Velocity_Acceleration_of_each_joint_msg = C41_BodyControl.msg.C41C0_APVA()
    else:
      self.Actual_torque_on_each_joint_msg = C41_BodyControl.msg.C41C0_AT()
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg = C41_BodyControl.msg.C41C0_APVA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Actual_torque_on_each_joint_msg.Actual_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Actual_torque_on_each_joint_msg.Actual_torque))
      length = len(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Position))
      length = len(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Velocity))
      length = len(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Acceleration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Actual_torque_on_each_joint_msg is None:
        self.Actual_torque_on_each_joint_msg = C41_BodyControl.msg.C41C0_AT()
      if self.Actual_Position_Velocity_Acceleration_of_each_joint_msg is None:
        self.Actual_Position_Velocity_Acceleration_of_each_joint_msg = C41_BodyControl.msg.C41C0_APVA()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_torque_on_each_joint_msg.Actual_torque = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Acceleration = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Actual_torque_on_each_joint_msg.Actual_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Actual_torque_on_each_joint_msg.Actual_torque.tostring())
      length = len(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Position.tostring())
      length = len(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Velocity.tostring())
      length = len(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Acceleration.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Actual_torque_on_each_joint_msg is None:
        self.Actual_torque_on_each_joint_msg = C41_BodyControl.msg.C41C0_AT()
      if self.Actual_Position_Velocity_Acceleration_of_each_joint_msg is None:
        self.Actual_Position_Velocity_Acceleration_of_each_joint_msg = C41_BodyControl.msg.C41C0_APVA()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_torque_on_each_joint_msg.Actual_torque = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.Actual_Position_Velocity_Acceleration_of_each_joint_msg.Actual_Acceleration = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class C41(object):
  _type          = 'C41_BodyControl/C41'
  _md5sum = 'e0976060194f42b49370255417cbacf7'
  _request_class  = C41Request
  _response_class = C41Response
