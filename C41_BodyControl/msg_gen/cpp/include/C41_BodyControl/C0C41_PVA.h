/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C41_BodyControl/msg/C0C41_PVA.msg */
#ifndef C41_BODYCONTROL_MESSAGE_C0C41_PVA_H
#define C41_BODYCONTROL_MESSAGE_C0C41_PVA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C41_BodyControl
{
template <class ContainerAllocator>
struct C0C41_PVA_ {
  typedef C0C41_PVA_<ContainerAllocator> Type;

  C0C41_PVA_()
  : PVA_POS()
  , PVA_VEL()
  , PVA_ACC()
  {
  }

  C0C41_PVA_(const ContainerAllocator& _alloc)
  : PVA_POS(_alloc)
  , PVA_VEL(_alloc)
  , PVA_ACC(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PVA_POS_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PVA_POS;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PVA_VEL_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PVA_VEL;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _PVA_ACC_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  PVA_ACC;


  typedef boost::shared_ptr< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C41_PVA
typedef  ::C41_BodyControl::C0C41_PVA_<std::allocator<void> > C0C41_PVA;

typedef boost::shared_ptr< ::C41_BodyControl::C0C41_PVA> C0C41_PVAPtr;
typedef boost::shared_ptr< ::C41_BodyControl::C0C41_PVA const> C0C41_PVAConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C41_BodyControl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bbdb9ca6f014d34732f2356d364199a5";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbbdb9ca6f014d347ULL;
  static const uint64_t static_value2 = 0x32f2356d364199a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C0C41_PVA";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] PVA_POS\n\
float32[] PVA_VEL\n\
float32[] PVA_ACC\n\
\n\
";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PVA_POS);
    stream.next(m.PVA_VEL);
    stream.next(m.PVA_ACC);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C41_PVA_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C41_BodyControl::C0C41_PVA_<ContainerAllocator> & v) 
  {
    s << indent << "PVA_POS[]" << std::endl;
    for (size_t i = 0; i < v.PVA_POS.size(); ++i)
    {
      s << indent << "  PVA_POS[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PVA_POS[i]);
    }
    s << indent << "PVA_VEL[]" << std::endl;
    for (size_t i = 0; i < v.PVA_VEL.size(); ++i)
    {
      s << indent << "  PVA_VEL[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PVA_VEL[i]);
    }
    s << indent << "PVA_ACC[]" << std::endl;
    for (size_t i = 0; i < v.PVA_ACC.size(); ++i)
    {
      s << indent << "  PVA_ACC[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.PVA_ACC[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C41_BODYCONTROL_MESSAGE_C0C41_PVA_H

