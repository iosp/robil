/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C41_BodyControl/msg/C41C0_APVA.msg */
#ifndef C41_BODYCONTROL_MESSAGE_C41C0_APVA_H
#define C41_BODYCONTROL_MESSAGE_C41C0_APVA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C41_BodyControl
{
template <class ContainerAllocator>
struct C41C0_APVA_ {
  typedef C41C0_APVA_<ContainerAllocator> Type;

  C41C0_APVA_()
  : Actual_Position()
  , Actual_Velocity()
  , Actual_Acceleration()
  {
  }

  C41C0_APVA_(const ContainerAllocator& _alloc)
  : Actual_Position(_alloc)
  , Actual_Velocity(_alloc)
  , Actual_Acceleration(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Actual_Position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  Actual_Position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Actual_Velocity_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  Actual_Velocity;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Actual_Acceleration_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  Actual_Acceleration;


  typedef boost::shared_ptr< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C41C0_APVA
typedef  ::C41_BodyControl::C41C0_APVA_<std::allocator<void> > C41C0_APVA;

typedef boost::shared_ptr< ::C41_BodyControl::C41C0_APVA> C41C0_APVAPtr;
typedef boost::shared_ptr< ::C41_BodyControl::C41C0_APVA const> C41C0_APVAConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C41_BodyControl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86ecff566b892a98eeaf18b12292a99c";
  }

  static const char* value(const  ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x86ecff566b892a98ULL;
  static const uint64_t static_value2 = 0xeeaf18b12292a99cULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C41C0_APVA";
  }

  static const char* value(const  ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] Actual_Position\n\
float32[] Actual_Velocity\n\
float32[] Actual_Acceleration \n\
\n\
";
  }

  static const char* value(const  ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Actual_Position);
    stream.next(m.Actual_Velocity);
    stream.next(m.Actual_Acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C41C0_APVA_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C41_BodyControl::C41C0_APVA_<ContainerAllocator> & v) 
  {
    s << indent << "Actual_Position[]" << std::endl;
    for (size_t i = 0; i < v.Actual_Position.size(); ++i)
    {
      s << indent << "  Actual_Position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Actual_Position[i]);
    }
    s << indent << "Actual_Velocity[]" << std::endl;
    for (size_t i = 0; i < v.Actual_Velocity.size(); ++i)
    {
      s << indent << "  Actual_Velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Actual_Velocity[i]);
    }
    s << indent << "Actual_Acceleration[]" << std::endl;
    for (size_t i = 0; i < v.Actual_Acceleration.size(); ++i)
    {
      s << indent << "  Actual_Acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Actual_Acceleration[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C41_BODYCONTROL_MESSAGE_C41C0_APVA_H

