/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C41_BodyControl/msg/C0C41_TC.msg */
#ifndef C41_BODYCONTROL_MESSAGE_C0C41_TC_H
#define C41_BODYCONTROL_MESSAGE_C0C41_TC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C41_BodyControl
{
template <class ContainerAllocator>
struct C0C41_TC_ {
  typedef C0C41_TC_<ContainerAllocator> Type;

  C0C41_TC_()
  : TC_TORQUE()
  {
  }

  C0C41_TC_(const ContainerAllocator& _alloc)
  : TC_TORQUE(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _TC_TORQUE_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  TC_TORQUE;


  typedef boost::shared_ptr< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_BodyControl::C0C41_TC_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C41_TC
typedef  ::C41_BodyControl::C0C41_TC_<std::allocator<void> > C0C41_TC;

typedef boost::shared_ptr< ::C41_BodyControl::C0C41_TC> C0C41_TCPtr;
typedef boost::shared_ptr< ::C41_BodyControl::C0C41_TC const> C0C41_TCConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C41_BodyControl::C0C41_TC_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C41_BodyControl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C0C41_TC_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95f314b4f53225c89774ef96cf49d4ae";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_TC_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95f314b4f53225c8ULL;
  static const uint64_t static_value2 = 0x9774ef96cf49d4aeULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C0C41_TC";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_TC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] TC_TORQUE\n\
\n\
";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_TC_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.TC_TORQUE);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C41_TC_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C41_BodyControl::C0C41_TC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C41_BodyControl::C0C41_TC_<ContainerAllocator> & v) 
  {
    s << indent << "TC_TORQUE[]" << std::endl;
    for (size_t i = 0; i < v.TC_TORQUE.size(); ++i)
    {
      s << indent << "  TC_TORQUE[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.TC_TORQUE[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C41_BODYCONTROL_MESSAGE_C0C41_TC_H

