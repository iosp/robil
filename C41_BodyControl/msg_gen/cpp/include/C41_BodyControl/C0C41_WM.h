/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C41_BodyControl/msg/C0C41_WM.msg */
#ifndef C41_BODYCONTROL_MESSAGE_C0C41_WM_H
#define C41_BODYCONTROL_MESSAGE_C0C41_WM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C41_BodyControl
{
template <class ContainerAllocator>
struct C0C41_WM_ {
  typedef C0C41_WM_<ContainerAllocator> Type;

  C0C41_WM_()
  : Work_mode(0)
  {
  }

  C0C41_WM_(const ContainerAllocator& _alloc)
  : Work_mode(0)
  {
  }

  typedef int32_t _Work_mode_type;
  int32_t Work_mode;

  enum { Torque_Control = 1 };
  enum { PVA_Control = 2 };

  typedef boost::shared_ptr< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_BodyControl::C0C41_WM_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C41_WM
typedef  ::C41_BodyControl::C0C41_WM_<std::allocator<void> > C0C41_WM;

typedef boost::shared_ptr< ::C41_BodyControl::C0C41_WM> C0C41_WMPtr;
typedef boost::shared_ptr< ::C41_BodyControl::C0C41_WM const> C0C41_WMConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C41_BodyControl::C0C41_WM_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C41_BodyControl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C0C41_WM_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd2e7d116c01bb5cd1733fe0ed106dc3";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_WM_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd2e7d116c01bb5cULL;
  static const uint64_t static_value2 = 0xd1733fe0ed106dc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C0C41_WM";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_WM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 Work_mode\n\
int32 Torque_Control=1\n\
int32 PVA_Control=2\n\
\n\
\n\
";
  }

  static const char* value(const  ::C41_BodyControl::C0C41_WM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Work_mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C41_WM_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C41_BodyControl::C0C41_WM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C41_BodyControl::C0C41_WM_<ContainerAllocator> & v) 
  {
    s << indent << "Work_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Work_mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C41_BODYCONTROL_MESSAGE_C0C41_WM_H

