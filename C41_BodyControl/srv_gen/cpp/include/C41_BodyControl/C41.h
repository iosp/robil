/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C41_BodyControl/srv/C41.srv */
#ifndef C41_BODYCONTROL_SERVICE_C41_H
#define C41_BODYCONTROL_SERVICE_C41_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C41_BodyControl/C0C41_WM.h"
#include "C41_BodyControl/C0C41_TC.h"
#include "C41_BodyControl/C0C41_PVA.h"
#include "C41_BodyControl/C0C41_LOAD.h"


#include "C41_BodyControl/C41C0_AT.h"
#include "C41_BodyControl/C41C0_APVA.h"

namespace C41_BodyControl
{
template <class ContainerAllocator>
struct C41Request_ {
  typedef C41Request_<ContainerAllocator> Type;

  C41Request_()
  : Work_mode_msg()
  , Torque_Control_msg()
  , Position_Velocity_Aceleration_Control_msg()
  , External_Load_msg()
  {
  }

  C41Request_(const ContainerAllocator& _alloc)
  : Work_mode_msg(_alloc)
  , Torque_Control_msg(_alloc)
  , Position_Velocity_Aceleration_Control_msg(_alloc)
  , External_Load_msg(_alloc)
  {
  }

  typedef  ::C41_BodyControl::C0C41_WM_<ContainerAllocator>  _Work_mode_msg_type;
   ::C41_BodyControl::C0C41_WM_<ContainerAllocator>  Work_mode_msg;

  typedef  ::C41_BodyControl::C0C41_TC_<ContainerAllocator>  _Torque_Control_msg_type;
   ::C41_BodyControl::C0C41_TC_<ContainerAllocator>  Torque_Control_msg;

  typedef  ::C41_BodyControl::C0C41_PVA_<ContainerAllocator>  _Position_Velocity_Aceleration_Control_msg_type;
   ::C41_BodyControl::C0C41_PVA_<ContainerAllocator>  Position_Velocity_Aceleration_Control_msg;

  typedef  ::C41_BodyControl::C0C41_LOAD_<ContainerAllocator>  _External_Load_msg_type;
   ::C41_BodyControl::C0C41_LOAD_<ContainerAllocator>  External_Load_msg;


  typedef boost::shared_ptr< ::C41_BodyControl::C41Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_BodyControl::C41Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C41Request
typedef  ::C41_BodyControl::C41Request_<std::allocator<void> > C41Request;

typedef boost::shared_ptr< ::C41_BodyControl::C41Request> C41RequestPtr;
typedef boost::shared_ptr< ::C41_BodyControl::C41Request const> C41RequestConstPtr;


template <class ContainerAllocator>
struct C41Response_ {
  typedef C41Response_<ContainerAllocator> Type;

  C41Response_()
  : Actual_torque_on_each_joint_msg()
  , Actual_Position_Velocity_Acceleration_of_each_joint_msg()
  {
  }

  C41Response_(const ContainerAllocator& _alloc)
  : Actual_torque_on_each_joint_msg(_alloc)
  , Actual_Position_Velocity_Acceleration_of_each_joint_msg(_alloc)
  {
  }

  typedef  ::C41_BodyControl::C41C0_AT_<ContainerAllocator>  _Actual_torque_on_each_joint_msg_type;
   ::C41_BodyControl::C41C0_AT_<ContainerAllocator>  Actual_torque_on_each_joint_msg;

  typedef  ::C41_BodyControl::C41C0_APVA_<ContainerAllocator>  _Actual_Position_Velocity_Acceleration_of_each_joint_msg_type;
   ::C41_BodyControl::C41C0_APVA_<ContainerAllocator>  Actual_Position_Velocity_Acceleration_of_each_joint_msg;


  typedef boost::shared_ptr< ::C41_BodyControl::C41Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_BodyControl::C41Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C41Response
typedef  ::C41_BodyControl::C41Response_<std::allocator<void> > C41Response;

typedef boost::shared_ptr< ::C41_BodyControl::C41Response> C41ResponsePtr;
typedef boost::shared_ptr< ::C41_BodyControl::C41Response const> C41ResponseConstPtr;

struct C41
{

typedef C41Request Request;
typedef C41Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C41
} // namespace C41_BodyControl

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C41Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C41Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_BodyControl::C41Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "49ca9a01d314c8ad002be00a2662b518";
  }

  static const char* value(const  ::C41_BodyControl::C41Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x49ca9a01d314c8adULL;
  static const uint64_t static_value2 = 0x002be00a2662b518ULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_BodyControl::C41Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C41Request";
  }

  static const char* value(const  ::C41_BodyControl::C41Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_BodyControl::C41Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C0C41_WM Work_mode_msg\n\
C41_BodyControl/C0C41_TC Torque_Control_msg\n\
C41_BodyControl/C0C41_PVA Position_Velocity_Aceleration_Control_msg\n\
C41_BodyControl/C0C41_LOAD External_Load_msg\n\
\n\
================================================================================\n\
MSG: C41_BodyControl/C0C41_WM\n\
int32 Work_mode\n\
int32 Torque_Control=1\n\
int32 PVA_Control=2\n\
\n\
\n\
================================================================================\n\
MSG: C41_BodyControl/C0C41_TC\n\
float32[] TC_TORQUE\n\
\n\
================================================================================\n\
MSG: C41_BodyControl/C0C41_PVA\n\
float32[] PVA_POS\n\
float32[] PVA_VEL\n\
float32[] PVA_ACC\n\
\n\
================================================================================\n\
MSG: C41_BodyControl/C0C41_LOAD\n\
float32[] Load\n\
\n\
";
  }

  static const char* value(const  ::C41_BodyControl::C41Request_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C41Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_BodyControl::C41Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_BodyControl::C41Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "70d9fc858f6fa6dc7a1d553c7025d37c";
  }

  static const char* value(const  ::C41_BodyControl::C41Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x70d9fc858f6fa6dcULL;
  static const uint64_t static_value2 = 0x7a1d553c7025d37cULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_BodyControl::C41Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C41Response";
  }

  static const char* value(const  ::C41_BodyControl::C41Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_BodyControl::C41Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C41C0_AT Actual_torque_on_each_joint_msg\n\
C41_BodyControl/C41C0_APVA Actual_Position_Velocity_Acceleration_of_each_joint_msg\n\
\n\
\n\
================================================================================\n\
MSG: C41_BodyControl/C41C0_AT\n\
float32[] Actual_torque \n\
\n\
================================================================================\n\
MSG: C41_BodyControl/C41C0_APVA\n\
float32[] Actual_Position\n\
float32[] Actual_Velocity\n\
float32[] Actual_Acceleration \n\
\n\
";
  }

  static const char* value(const  ::C41_BodyControl::C41Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_BodyControl::C41Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Work_mode_msg);
    stream.next(m.Torque_Control_msg);
    stream.next(m.Position_Velocity_Aceleration_Control_msg);
    stream.next(m.External_Load_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C41Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_BodyControl::C41Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Actual_torque_on_each_joint_msg);
    stream.next(m.Actual_Position_Velocity_Acceleration_of_each_joint_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C41Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C41_BodyControl::C41> {
  static const char* value() 
  {
    return "e0976060194f42b49370255417cbacf7";
  }

  static const char* value(const C41_BodyControl::C41&) { return value(); } 
};

template<>
struct DataType<C41_BodyControl::C41> {
  static const char* value() 
  {
    return "C41_BodyControl/C41";
  }

  static const char* value(const C41_BodyControl::C41&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C41_BodyControl::C41Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0976060194f42b49370255417cbacf7";
  }

  static const char* value(const C41_BodyControl::C41Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C41_BodyControl::C41Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C41";
  }

  static const char* value(const C41_BodyControl::C41Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C41_BodyControl::C41Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0976060194f42b49370255417cbacf7";
  }

  static const char* value(const C41_BodyControl::C41Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C41_BodyControl::C41Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_BodyControl/C41";
  }

  static const char* value(const C41_BodyControl::C41Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C41_BODYCONTROL_SERVICE_C41_H

