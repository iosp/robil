Car Manipulation functions

How to Check:
============
run the node with the DRC simulation
to put Atlas on Drc vehicle you can launch:
roslaunch C67_CarManipulation C67_drc.launch

then to put Atlas in driver seat:
rostopic pub --once /drc_world/robot_enter_car geometry_msgs/Pose '{position: {}}'
or
rostopic pub --once /drc_world/robot_enter_car geometry_msgs/Pose '{position: {y: 0, z: -0.1}}'

you need to run C45 launcher and dependencies:
rosrun C42_DRCSim2_tools foot_contact_filter.py
roslaunch C45_PostureControl C45_PostureControl.launch

------------------------------------------------------------------------------

to test one of the following action servers: GripSteeringWheel, CalibrateWheel, PlaceFeetOnPedals, CalibratePedals,
GripHandBrake, GripGearStick.
use the taskTester.cpp (by Dan)

for GripSteeringWheel use:(in this example wait for 1 second go from angle of 0.3 to angle of 1.5 [rad]) - active
rosrun C67_CarManipulation GripSteeringWheel 
rosrun C67_CarManipulation task_tester GripSteeringWheel 1 args="StartAngle=0.3,EndAngle=1.5"
you can only specify angle parameter
rosrun C67_CarManipulation task_tester GripSteeringWheel 1 args="angle=1.5"

for CalibrateWheel use:(in this example wait for 1 second use target operation 1(1-Hold, 2-Release), angle[rad], Hand(right/left) - active
rosrun C67_CarManipulation CalibrateWheel 
rosrun C67_CarManipulation task_tester CalibrateWheel 1 args="operation=1,angle=0.3,Hand=right"

for PlaceFeetOnPedals use:(in this example wait for 1 second use target angle of 1.5 [rad]) - stub
rosrun C67_CarManipulation PlaceFeetOnPedals 
rosrun C67_CarManipulation task_tester PlaceFeetOnPedals 1 args="angle=1.5"

for CalibratePedals use: - stub
rosrun C67_CarManipulation CalibratePedals 
rosrun C67_CarManipulation task_tester CalibratePedals 1

for GripHandBrake use:(in this example wait for 1 second use target operation 1(1-Release, 2-Engage)) - active
rosrun C67_CarManipulation GripHandBrake 
rosrun C67_CarManipulation task_tester GripHandBrake 1 args="operation=1"

you can specify target position, or offset, for example  args="operation=2,dx=0.02,dy=0.01"(offset x=+2cm, y=+1cm) 

for GripGearStick use:(in this example wait for 1 second use target operation 2(1-Forward, 2-Reverse)) - active
rosrun C67_CarManipulation GripGearStick 
rosrun C67_CarManipulation task_tester GripGearStick 1 args="operation=2"

you can specify target position, or offset, for example  args="operation=2,dx=0.02,dy=0.01"(offset x=+2cm, y=+1cm) 


you can run all the servers (i.e. GripSteeringWheel, CalibrateWheel...), by 
roslaunch C67_CarManipulation C67_servers.launch
but then you don't see the servers prints.

-------------------------------------------------------------------------------

to test the rPath,lPath nodes, run it with *RPY parameters time and NO. of points.

for example:

right hand(x y z R P Y sec points_Number):
rosrun C67_CarManipulation rPath 0.499917 -0.625275 0.391767 -1.536377 0.400938 -0.019710 2 100
rosrun C67_CarManipulation rPath 0.440300 -0.209759 0.245574 -1.863805 0.361662 0.810374 2 100
left hand:
rosrun C67_CarManipulation lPath 0.028 0.437 -0.277 -2.816 1.366 1.687 2 100
rosrun C67_CarManipulation lPath 0.499917 0.625275 0.391767 1.536377 0.400938 0.019710 2 100
rosrun C67_CarManipulation lPath 0.440300 0.209759 0.245574 1.863805 0.361662 -0.810374 2 100

if solution exists the movement command will be transfered to the DRC module.
if no solution was found, no command will be sent to the module.

to see only arms position run nodes w/o parameters.

Prints
======
-Current Position and arm 6 angles
if parameters where given
-the RPY Target
if solution exists the node prints:
-solution for arm's 6 angles
-RPY of solution
-total error of solution compared to target

example print: 
Current Position:
q4-q9:0.005872, 0.036718, 1.621916, -1.495941, -1.570388, 0.060688
RPY(0.503866 -0.622425 0.392048 -1.537426 0.401099 -0.014788)
Target:
RPY(0.499917 -0.625275 0.391767 -1.536377 0.400938 -0.019710)
Solution/Command:
q4-q9:0.010000, 0.192323, 1.416106, -1.501731, -1.402116, 0.260856
RPY(0.499248 -0.628592 0.389581 -1.533828 0.411311 -0.035146)
error: 0.029256
---------------------------------------------------------------------------------------
to test the rJoint,lJoint nodes, run it with the actuator number and angle time and NO. of points.
the relevant arm angles are q4-q9, q4->r_clav/l_clav, q9->r_hand/l_hand

for example
turn right q9(last) to angle 0.2 
rJoint (angle angle_value time NumOfPoints)
rosrun C67_CarManipulation rJoint 9 0.2 2 100

to see only arms position run nodes w/o parameters.

example print:
Current Position:
q4-q9:0.019041, 0.109008, 1.856177, -1.485410, -1.571013, 0.175345
RPY(0.531952 -0.547437 0.239556 -1.458226 0.753246 0.160728)
angle q9: 0.200000 Limits(-1.571000, 0.436000)
q4-q9:0.019041, 0.109008, 1.856177, -1.485410, -1.571013, 0.200000
RPY(0.528851 -0.547337 0.235189 -1.455533 0.777741 0.164615)
 
----------------------------------------------------------------------------------------
C67_Path server is a service to give Inverse Kinematics result
to run service 
rosrun C67_CarManipulation PathServer
use answer only if valid == true
---------------------------------------------------------------------------------------
*RPY parameters are x,y,z,R,P,Y: x,y,z - position, R,P,Y - orientation.
The Orientation is pelvis to middle finger base (right_f1_base/left_f1_base)
--------------------------------------------------------------------------------------

