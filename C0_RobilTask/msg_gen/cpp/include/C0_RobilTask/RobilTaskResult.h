/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C0_RobilTask/msg/RobilTaskResult.msg */
#ifndef C0_ROBILTASK_MESSAGE_ROBILTASKRESULT_H
#define C0_ROBILTASK_MESSAGE_ROBILTASKRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C0_RobilTask
{
template <class ContainerAllocator>
struct RobilTaskResult_ {
  typedef RobilTaskResult_<ContainerAllocator> Type;

  RobilTaskResult_()
  : success(0)
  , description()
  , plan()
  {
  }

  RobilTaskResult_(const ContainerAllocator& _alloc)
  : success(0)
  , description(_alloc)
  , plan(_alloc)
  {
  }

  typedef int32_t _success_type;
  int32_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  description;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _plan_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  plan;


  typedef boost::shared_ptr< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobilTaskResult
typedef  ::C0_RobilTask::RobilTaskResult_<std::allocator<void> > RobilTaskResult;

typedef boost::shared_ptr< ::C0_RobilTask::RobilTaskResult> RobilTaskResultPtr;
typedef boost::shared_ptr< ::C0_RobilTask::RobilTaskResult const> RobilTaskResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C0_RobilTask

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2a3ce67db61409507027bbc08434f3e8";
  }

  static const char* value(const  ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2a3ce67db6140950ULL;
  static const uint64_t static_value2 = 0x7027bbc08434f3e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C0_RobilTask/RobilTaskResult";
  }

  static const char* value(const  ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result\n\
int32 success\n\
string description\n\
string plan\n\
\n\
";
  }

  static const char* value(const  ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.description);
    stream.next(m.plan);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobilTaskResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C0_RobilTask::RobilTaskResult_<ContainerAllocator> & v) 
  {
    s << indent << "success: ";
    Printer<int32_t>::stream(s, indent + "  ", v.success);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "plan: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.plan);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C0_ROBILTASK_MESSAGE_ROBILTASKRESULT_H

